/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package GUI;

import java.awt.Color;
import java.awt.ComponentOrientation;
import java.awt.Frame;
import java.awt.GraphicsEnvironment;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.Writer;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Calendar;
import java.util.Date;
import java.util.Formatter;
import javax.swing.JFrame;
import java.util.Random;
import java.util.Scanner;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.JTextPane;
import javax.swing.border.Border;
import javax.swing.text.BadLocationException;
import javax.swing.text.DateFormatter;
import schedule.Guard;

/**
 *
 * @author Omer
 */
public class Home_Frame extends javax.swing.JFrame {

    static boolean maximized = true;
    int xMouse;
    int yMouse;
    static Guard[] guards;
    static String motsash;
    public static int[][] num_sec = new int[14][3];
    static String officer;
    static String[][] quality_temp;
    static String[] authority_temp;
    static String[][] days = new String[14][3];
    static String[][] organized;
    static String notes = "";
    static LocalDate[] dates = new LocalDate[14];
    JTextPane[][] textDays = new JTextPane[14][3];
    boolean typeError = false;
    int numGuards = 0;
    boolean stop = false;
    boolean number = false;
    int kind =0,indexCount = 0;
    public Home_Frame() throws InterruptedException, IOException {
        BuildGuards();
        ToGuards();
        initComponents();
        loading();    
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jLabel34 = new javax.swing.JLabel();
        resetNoBtn = new javax.swing.JButton();
        resetYesBtn = new javax.swing.JButton();
        pnlHeader = new javax.swing.JPanel();
        btnExit = new javax.swing.JButton();
        btnMaximize = new javax.swing.JButton();
        btnMinimize = new javax.swing.JButton();
        jLabel35 = new javax.swing.JLabel();
        pnlMenu = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        btnTimeline = new javax.swing.JButton();
        lblTimeline = new javax.swing.JLabel();
        btnNews = new javax.swing.JButton();
        lblNews = new javax.swing.JLabel();
        reset_button = new javax.swing.JButton();
        reset_label = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        organize = new javax.swing.JButton();
        jLabel36 = new javax.swing.JLabel();
        btnRestriction = new javax.swing.JButton();
        lblRestriction = new javax.swing.JLabel();
        pnlBody = new javax.swing.JPanel();
        jspTimeline = new javax.swing.JScrollPane();
        pnlInsert = new javax.swing.JPanel();
        week1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        days1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        shifts1 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        mornings1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Morning7 = new javax.swing.JTextPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        morning6 = new javax.swing.JTextPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        Morning5 = new javax.swing.JTextPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        Morning4 = new javax.swing.JTextPane();
        jScrollPane6 = new javax.swing.JScrollPane();
        Morning3 = new javax.swing.JTextPane();
        jScrollPane7 = new javax.swing.JScrollPane();
        Morning2 = new javax.swing.JTextPane();
        jScrollPane8 = new javax.swing.JScrollPane();
        Morning1 = new javax.swing.JTextPane();
        morning1S = new javax.swing.JSpinner();
        morning2S = new javax.swing.JSpinner();
        morning3S = new javax.swing.JSpinner();
        morning4S = new javax.swing.JSpinner();
        morning5S = new javax.swing.JSpinner();
        morning6S = new javax.swing.JSpinner();
        morning7S = new javax.swing.JSpinner();
        noons1 = new javax.swing.JPanel();
        jScrollPane23 = new javax.swing.JScrollPane();
        noon7 = new javax.swing.JTextPane();
        jScrollPane24 = new javax.swing.JScrollPane();
        noon6 = new javax.swing.JTextPane();
        jScrollPane25 = new javax.swing.JScrollPane();
        noon5 = new javax.swing.JTextPane();
        jScrollPane26 = new javax.swing.JScrollPane();
        noon4 = new javax.swing.JTextPane();
        jScrollPane27 = new javax.swing.JScrollPane();
        noon3 = new javax.swing.JTextPane();
        jScrollPane28 = new javax.swing.JScrollPane();
        noon2 = new javax.swing.JTextPane();
        jScrollPane29 = new javax.swing.JScrollPane();
        noon1 = new javax.swing.JTextPane();
        noon1S = new javax.swing.JSpinner();
        noon2S = new javax.swing.JSpinner();
        noon3S = new javax.swing.JSpinner();
        noon4S = new javax.swing.JSpinner();
        noon5S = new javax.swing.JSpinner();
        noon6S = new javax.swing.JSpinner();
        noon7S = new javax.swing.JSpinner();
        nights1 = new javax.swing.JPanel();
        jScrollPane30 = new javax.swing.JScrollPane();
        night7 = new javax.swing.JTextPane();
        jScrollPane31 = new javax.swing.JScrollPane();
        night6 = new javax.swing.JTextPane();
        jScrollPane32 = new javax.swing.JScrollPane();
        night5 = new javax.swing.JTextPane();
        jScrollPane33 = new javax.swing.JScrollPane();
        night4 = new javax.swing.JTextPane();
        jScrollPane34 = new javax.swing.JScrollPane();
        night3 = new javax.swing.JTextPane();
        jScrollPane35 = new javax.swing.JScrollPane();
        night2 = new javax.swing.JTextPane();
        jScrollPane36 = new javax.swing.JScrollPane();
        night1 = new javax.swing.JTextPane();
        night1S = new javax.swing.JSpinner();
        night2S = new javax.swing.JSpinner();
        night3S = new javax.swing.JSpinner();
        night4S = new javax.swing.JSpinner();
        night5S = new javax.swing.JSpinner();
        night6S = new javax.swing.JSpinner();
        night7S = new javax.swing.JSpinner();
        week2 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        days2 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        shifts2 = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        mornings2 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        Morning14 = new javax.swing.JTextPane();
        jScrollPane10 = new javax.swing.JScrollPane();
        morning13 = new javax.swing.JTextPane();
        jScrollPane11 = new javax.swing.JScrollPane();
        morning12 = new javax.swing.JTextPane();
        jScrollPane12 = new javax.swing.JScrollPane();
        morning11 = new javax.swing.JTextPane();
        jScrollPane13 = new javax.swing.JScrollPane();
        Morning10 = new javax.swing.JTextPane();
        jScrollPane14 = new javax.swing.JScrollPane();
        Morning9 = new javax.swing.JTextPane();
        jScrollPane15 = new javax.swing.JScrollPane();
        Morning8 = new javax.swing.JTextPane();
        morning8S = new javax.swing.JSpinner();
        morning9S = new javax.swing.JSpinner();
        morning10S = new javax.swing.JSpinner();
        morning11S = new javax.swing.JSpinner();
        morning12S = new javax.swing.JSpinner();
        morning13S = new javax.swing.JSpinner();
        morning14S = new javax.swing.JSpinner();
        noons2 = new javax.swing.JPanel();
        jScrollPane37 = new javax.swing.JScrollPane();
        noon14 = new javax.swing.JTextPane();
        jScrollPane38 = new javax.swing.JScrollPane();
        noon13 = new javax.swing.JTextPane();
        jScrollPane39 = new javax.swing.JScrollPane();
        noon12 = new javax.swing.JTextPane();
        jScrollPane40 = new javax.swing.JScrollPane();
        noon11 = new javax.swing.JTextPane();
        jScrollPane41 = new javax.swing.JScrollPane();
        noon10 = new javax.swing.JTextPane();
        jScrollPane42 = new javax.swing.JScrollPane();
        noon9 = new javax.swing.JTextPane();
        jScrollPane43 = new javax.swing.JScrollPane();
        noon8 = new javax.swing.JTextPane();
        noon8S = new javax.swing.JSpinner();
        noon9S = new javax.swing.JSpinner();
        noon10S = new javax.swing.JSpinner();
        noon11S = new javax.swing.JSpinner();
        noon12S = new javax.swing.JSpinner();
        noon13S = new javax.swing.JSpinner();
        noon14S = new javax.swing.JSpinner();
        nights2 = new javax.swing.JPanel();
        jScrollPane44 = new javax.swing.JScrollPane();
        night14 = new javax.swing.JTextPane();
        jScrollPane45 = new javax.swing.JScrollPane();
        night13 = new javax.swing.JTextPane();
        jScrollPane46 = new javax.swing.JScrollPane();
        night12 = new javax.swing.JTextPane();
        jScrollPane47 = new javax.swing.JScrollPane();
        night11 = new javax.swing.JTextPane();
        jScrollPane48 = new javax.swing.JScrollPane();
        night10 = new javax.swing.JTextPane();
        jScrollPane49 = new javax.swing.JScrollPane();
        night9 = new javax.swing.JTextPane();
        jScrollPane50 = new javax.swing.JScrollPane();
        night8 = new javax.swing.JTextPane();
        night8S = new javax.swing.JSpinner();
        night9S = new javax.swing.JSpinner();
        night10S = new javax.swing.JSpinner();
        night11S = new javax.swing.JSpinner();
        night12S = new javax.swing.JSpinner();
        night13S = new javax.swing.JSpinner();
        night14S = new javax.swing.JSpinner();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane17 = new javax.swing.JScrollPane();
        motsashText = new javax.swing.JTextPane();
        jLabel43 = new javax.swing.JLabel();
        jSpinner5 = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane16 = new javax.swing.JScrollPane();
        quality = new javax.swing.JTextPane();
        ResScroll = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jSpinner2 = new javax.swing.JSpinner();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jSpinner3 = new javax.swing.JSpinner();
        jSpinner4 = new javax.swing.JSpinner();
        jLabel42 = new javax.swing.JLabel();

        jDialog1.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jDialog1.setTitle("איפוס איכויות");
        jDialog1.setIconImage(null);
        jDialog1.setLocationByPlatform(true);
        jDialog1.setResizable(false);
        jDialog1.setType(java.awt.Window.Type.POPUP);

        jLabel34.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel34.setText("האם את/ה בטוח/ה שאת/ה רוצה לאפס את האיכויות?");

        resetNoBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        resetNoBtn.setText("לא");
        resetNoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetNoBtnActionPerformed(evt);
            }
        });

        resetYesBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        resetYesBtn.setText("כן");
        resetYesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetYesBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel34, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 521, Short.MAX_VALUE)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(resetNoBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(resetYesBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resetNoBtn)
                    .addComponent(resetYesBtn))
                .addGap(51, 51, 51))
        );

        jDialog1.setLocationRelativeTo(null);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("משמר בתי המשפט");
        setUndecorated(true);
        setSize(new java.awt.Dimension(1000, 600));

        pnlHeader.setBackground(new java.awt.Color(255, 255, 255));
        pnlHeader.setForeground(new java.awt.Color(255, 255, 255));
        pnlHeader.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                pnlHeaderMouseDragged(evt);
            }
        });
        pnlHeader.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                pnlHeaderMousePressed(evt);
            }
        });

        btnExit.setBackground(new java.awt.Color(255, 255, 255));
        btnExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Exit.png"))); // NOI18N
        btnExit.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnExit.setContentAreaFilled(false);
        btnExit.setFocusable(false);
        btnExit.setOpaque(true);
        btnExit.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Exit (2).png"))); // NOI18N
        btnExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnExitMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnExitMouseExited(evt);
            }
        });
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnMaximize.setBackground(new java.awt.Color(255, 255, 255));
        btnMaximize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Maximize.png"))); // NOI18N
        btnMaximize.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnMaximize.setContentAreaFilled(false);
        btnMaximize.setFocusable(false);
        btnMaximize.setOpaque(true);
        btnMaximize.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Maximize (2).png"))); // NOI18N
        btnMaximize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnMaximizeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnMaximizeMouseExited(evt);
            }
        });
        btnMaximize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMaximizeActionPerformed(evt);
            }
        });

        btnMinimize.setBackground(new java.awt.Color(255, 255, 255));
        btnMinimize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Minimize.png"))); // NOI18N
        btnMinimize.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnMinimize.setContentAreaFilled(false);
        btnMinimize.setFocusable(false);
        btnMinimize.setOpaque(true);
        btnMinimize.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Minimize (2).png"))); // NOI18N
        btnMinimize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnMinimizeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnMinimizeMouseExited(evt);
            }
        });
        btnMinimize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMinimizeActionPerformed(evt);
            }
        });

        jLabel35.setMaximumSize(new java.awt.Dimension(135, 23));
        jLabel35.setMinimumSize(new java.awt.Dimension(135, 23));
        jLabel35.setPreferredSize(new java.awt.Dimension(135, 23));
        BufferedImage img2 = null;
        try {
            img2 = ImageIO.read(getClass().getResource("/Symbol.png"));
        } catch (IOException e)  {
            e.printStackTrace();
        }
        Image dimg2 = img2.getScaledInstance(40, 23,Image.SCALE_SMOOTH);
        ImageIcon imageIcon2 = new ImageIcon(dimg2);
        jLabel35.setIcon(imageIcon2);

        javax.swing.GroupLayout pnlHeaderLayout = new javax.swing.GroupLayout(pnlHeader);
        pnlHeader.setLayout(pnlHeaderLayout);
        pnlHeaderLayout.setHorizontalGroup(
            pnlHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlHeaderLayout.createSequentialGroup()
                .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnMinimize, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(btnMaximize, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(btnExit))
        );
        pnlHeaderLayout.setVerticalGroup(
            pnlHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHeaderLayout.createSequentialGroup()
                .addGroup(pnlHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(btnMaximize, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnExit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnMinimize, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel35, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pnlMenu.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(44, 62, 80));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("מערכת סידור עבודה - משמר בתי המשפט");

        btnTimeline.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        btnTimeline.setForeground(new java.awt.Color(44, 62, 80));
        btnTimeline.setText("הגשות");
        btnTimeline.setBorder(null);
        btnTimeline.setContentAreaFilled(false);
        btnTimeline.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnTimeline.setFocusable(false);
        btnTimeline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimelineActionPerformed(evt);
            }
        });

        lblTimeline.setBackground(new java.awt.Color(0, 204, 106));
        lblTimeline.setOpaque(true);

        btnNews.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        btnNews.setForeground(new java.awt.Color(44, 62, 80));
        btnNews.setText("טבלת איכויות");
        btnNews.setBorder(null);
        btnNews.setContentAreaFilled(false);
        btnNews.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnNews.setFocusable(false);
        btnNews.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnNews.setPreferredSize(new java.awt.Dimension(100, 27));
        btnNews.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewsActionPerformed(evt);
            }
        });

        lblNews.setBackground(new java.awt.Color(255, 255, 255));
        lblNews.setOpaque(true);

        reset_button.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        reset_button.setForeground(new java.awt.Color(44, 62, 80));
        reset_button.setBorder(null);
        reset_button.setContentAreaFilled(false);
        reset_button.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        reset_button.setEnabled(false);
        reset_button.setFocusable(false);
        reset_button.setPreferredSize(new java.awt.Dimension(100, 27));
        reset_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reset_buttonActionPerformed(evt);
            }
        });

        reset_label.setBackground(new java.awt.Color(255, 255, 255));
        reset_label.setOpaque(true);
        reset_label.setPreferredSize(new java.awt.Dimension(100, 0));

        jLabel3.setBackground(new java.awt.Color(0, 51, 255));
        jLabel3.setOpaque(true);

        organize.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        organize.setForeground(new java.awt.Color(44, 62, 80));
        organize.setText("בצע סידור");
        organize.setToolTipText("");
        organize.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        organize.setContentAreaFilled(false);
        organize.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        organize.setFocusable(false);
        organize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                organizeActionPerformed(evt);
            }
        });

        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel36.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel36.setMaximumSize(new java.awt.Dimension(137, 48));
        jLabel36.setMinimumSize(new java.awt.Dimension(137, 48));
        jLabel36.setPreferredSize(new java.awt.Dimension(137, 48));
        BufferedImage img = null;
        try {
            img = ImageIO.read(getClass().getResource("/Symbol.png"));
        } catch (IOException e)  {
            e.printStackTrace();
        }
        Image dimg = img.getScaledInstance(80, 48,Image.SCALE_SMOOTH);
        ImageIcon imageIcon = new ImageIcon(dimg);
        jLabel36.setIcon(imageIcon);

        btnRestriction.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        btnRestriction.setForeground(new java.awt.Color(44, 62, 80));
        btnRestriction.setText("הגבלות");
        btnRestriction.setBorder(null);
        btnRestriction.setContentAreaFilled(false);
        btnRestriction.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRestriction.setFocusable(false);
        btnRestriction.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRestriction.setPreferredSize(new java.awt.Dimension(100, 27));
        btnRestriction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRestrictionActionPerformed(evt);
            }
        });

        lblRestriction.setBackground(new java.awt.Color(255, 255, 255));
        lblRestriction.setOpaque(true);

        javax.swing.GroupLayout pnlMenuLayout = new javax.swing.GroupLayout(pnlMenu);
        pnlMenu.setLayout(pnlMenuLayout);
        pnlMenuLayout.setHorizontalGroup(
            pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMenuLayout.createSequentialGroup()
                .addGroup(pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMenuLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlMenuLayout.createSequentialGroup()
                                .addGroup(pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(organize, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(reset_button, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(reset_label, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMenuLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnRestriction, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblRestriction, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnNews, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                            .addComponent(lblNews, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 933, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlMenuLayout.createSequentialGroup()
                        .addGroup(pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnTimeline, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblTimeline, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE))
                        .addContainerGap())
                    .addComponent(jLabel36, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        pnlMenuLayout.setVerticalGroup(
            pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMenuLayout.createSequentialGroup()
                .addGroup(pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel36, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0)
                .addGroup(pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMenuLayout.createSequentialGroup()
                        .addGroup(pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(reset_button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(organize))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(reset_label, javax.swing.GroupLayout.DEFAULT_SIZE, 8, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMenuLayout.createSequentialGroup()
                        .addGroup(pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnNews, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnRestriction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlMenuLayout.createSequentialGroup()
                                .addComponent(btnTimeline, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                                .addGap(8, 8, 8)))
                        .addGroup(pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblTimeline, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblRestriction, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblNews, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 5, Short.MAX_VALUE)))))
        );

        pnlBody.setLayout(new java.awt.CardLayout());

        jspTimeline.setBorder(null);
        jspTimeline.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        pnlInsert.setBackground(new java.awt.Color(245, 245, 245));

        week1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("שבוע ראשון");

        javax.swing.GroupLayout week1Layout = new javax.swing.GroupLayout(week1);
        week1.setLayout(week1Layout);
        week1Layout.setHorizontalGroup(
            week1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        week1Layout.setVerticalGroup(
            week1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel4)
        );

        days1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        java.awt.FlowLayout flowLayout1 = new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0);
        flowLayout1.setAlignOnBaseline(true);
        days1.setLayout(flowLayout1);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("יום שבת");
        jLabel5.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jLabel5.setMaximumSize(new java.awt.Dimension(130, 22));
        jLabel5.setMinimumSize(new java.awt.Dimension(130, 22));
        jLabel5.setName(""); // NOI18N
        jLabel5.setPreferredSize(new java.awt.Dimension(132, 22));
        jLabel5.setRequestFocusEnabled(false);
        jLabel5.setVerifyInputWhenFocusTarget(false);
        days1.add(jLabel5);

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("יום שישי");
        jLabel6.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jLabel6.setMaximumSize(new java.awt.Dimension(130, 22));
        jLabel6.setMinimumSize(new java.awt.Dimension(130, 22));
        jLabel6.setPreferredSize(new java.awt.Dimension(132, 22));
        days1.add(jLabel6);

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("יום חמישי");
        jLabel7.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jLabel7.setMaximumSize(new java.awt.Dimension(130, 22));
        jLabel7.setMinimumSize(new java.awt.Dimension(130, 22));
        jLabel7.setPreferredSize(new java.awt.Dimension(130, 22));
        days1.add(jLabel7);

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("יום רביעי");
        jLabel8.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jLabel8.setMaximumSize(new java.awt.Dimension(130, 22));
        jLabel8.setMinimumSize(new java.awt.Dimension(130, 22));
        jLabel8.setPreferredSize(new java.awt.Dimension(130, 22));
        days1.add(jLabel8);

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("יום שלישי");
        jLabel9.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jLabel9.setMaximumSize(new java.awt.Dimension(130, 22));
        jLabel9.setMinimumSize(new java.awt.Dimension(130, 22));
        jLabel9.setPreferredSize(new java.awt.Dimension(130, 22));
        days1.add(jLabel9);

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("יום שני");
        jLabel10.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jLabel10.setMaximumSize(new java.awt.Dimension(130, 22));
        jLabel10.setMinimumSize(new java.awt.Dimension(130, 22));
        jLabel10.setPreferredSize(new java.awt.Dimension(130, 22));
        days1.add(jLabel10);

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("יום ראשון");
        jLabel11.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jLabel11.setMaximumSize(new java.awt.Dimension(130, 22));
        jLabel11.setMinimumSize(new java.awt.Dimension(130, 22));
        jLabel11.setPreferredSize(new java.awt.Dimension(130, 22));
        days1.add(jLabel11);

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("משמרת");
        jLabel12.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jLabel12.setMaximumSize(new java.awt.Dimension(120, 22));
        jLabel12.setMinimumSize(new java.awt.Dimension(120, 22));
        jLabel12.setPreferredSize(new java.awt.Dimension(145, 22));
        days1.add(jLabel12);

        shifts1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("בוקר");
        jLabel13.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("כמות מאבטחים במשמרת:");
        jLabel16.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("צהריים");
        jLabel17.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("כמות מאבטחים במשמרת:");
        jLabel18.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jLabel19.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel19.setText("לילה");
        jLabel19.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel20.setText("כמות מאבטחים במשמרת:");
        jLabel20.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        javax.swing.GroupLayout shifts1Layout = new javax.swing.GroupLayout(shifts1);
        shifts1.setLayout(shifts1Layout);
        shifts1Layout.setHorizontalGroup(
            shifts1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        shifts1Layout.setVerticalGroup(
            shifts1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(shifts1Layout.createSequentialGroup()
                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))
        );

        mornings1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        Morning7.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        Morning7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Morning7.setToolTipText("");
        Morning7.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane2.setViewportView(Morning7);
        Morning7.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane2.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        morning6.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        morning6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane3.setViewportView(morning6);
        morning6.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane3.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        Morning5.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        Morning5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane4.setViewportView(Morning5);
        Morning5.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane4.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        Morning4.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        Morning4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane5.setViewportView(Morning4);
        Morning4.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane5.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        Morning3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        Morning3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane6.setViewportView(Morning3);
        Morning3.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane6.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        Morning2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        Morning2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane7.setViewportView(Morning2);
        Morning2.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane7.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        Morning1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        Morning1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane8.setViewportView(Morning1);
        Morning1.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane8.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        morning1S.setModel(new javax.swing.SpinnerNumberModel(4, 0, null, 1));
        morning1S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        morning2S.setModel(new javax.swing.SpinnerNumberModel(4, 0, null, 1));
        morning2S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        morning3S.setModel(new javax.swing.SpinnerNumberModel(4, 0, null, 1));
        morning3S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        morning4S.setModel(new javax.swing.SpinnerNumberModel(4, 0, null, 1));
        morning4S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        morning5S.setModel(new javax.swing.SpinnerNumberModel(4, 0, null, 1));
        morning5S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        morning6S.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        morning6S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        morning7S.setModel(new javax.swing.SpinnerNumberModel(2, 0, null, 1));
        morning7S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        javax.swing.GroupLayout mornings1Layout = new javax.swing.GroupLayout(mornings1);
        mornings1.setLayout(mornings1Layout);
        mornings1Layout.setHorizontalGroup(
            mornings1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mornings1Layout.createSequentialGroup()
                .addGroup(mornings1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mornings1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addGap(0, 0, 0)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mornings1Layout.createSequentialGroup()
                        .addComponent(morning7S, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(morning6S, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(morning5S, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(morning4S, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(morning3S, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(mornings1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(morning2S, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(mornings1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(morning1S, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        mornings1Layout.setVerticalGroup(
            mornings1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mornings1Layout.createSequentialGroup()
                .addGroup(mornings1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(morning1S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(morning2S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(morning3S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(morning4S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(morning5S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(morning6S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(morning7S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(mornings1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                    .addComponent(jScrollPane7)
                    .addComponent(jScrollPane6)
                    .addComponent(jScrollPane5)
                    .addComponent(jScrollPane4)
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane2)))
        );

        noons1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        noon7.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        noon7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        noon7.setToolTipText("");
        noon7.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane23.setViewportView(noon7);
        noon7.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane23.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        noon6.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        noon6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane24.setViewportView(noon6);
        noon6.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane24.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        noon5.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        noon5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane25.setViewportView(noon5);
        noon5.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane25.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        noon4.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        noon4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane26.setViewportView(noon4);
        noon4.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane26.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        noon3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        noon3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane27.setViewportView(noon3);
        noon3.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane27.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        noon2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        noon2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane28.setViewportView(noon2);
        noon2.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane28.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        noon1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        noon1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane29.setViewportView(noon1);
        noon1.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane29.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        noon1S.setModel(new javax.swing.SpinnerNumberModel(3, 0, null, 1));
        noon1S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        noon2S.setModel(new javax.swing.SpinnerNumberModel(3, 0, null, 1));
        noon2S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        noon3S.setModel(new javax.swing.SpinnerNumberModel(3, 0, null, 1));
        noon3S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        noon4S.setModel(new javax.swing.SpinnerNumberModel(3, 0, null, 1));
        noon4S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        noon5S.setModel(new javax.swing.SpinnerNumberModel(3, 0, null, 1));
        noon5S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        noon6S.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        noon6S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        noon7S.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        noon7S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        javax.swing.GroupLayout noons1Layout = new javax.swing.GroupLayout(noons1);
        noons1.setLayout(noons1Layout);
        noons1Layout.setHorizontalGroup(
            noons1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(noons1Layout.createSequentialGroup()
                .addGroup(noons1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, noons1Layout.createSequentialGroup()
                        .addComponent(jScrollPane23)
                        .addGap(0, 0, 0)
                        .addComponent(jScrollPane24, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jScrollPane25, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jScrollPane26, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jScrollPane27, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(noons1Layout.createSequentialGroup()
                        .addComponent(noon7S, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(noon6S, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(noon5S, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(noon4S, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(noon3S, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(noons1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane28, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noon2S, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(noons1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane29, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noon1S, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        noons1Layout.setVerticalGroup(
            noons1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, noons1Layout.createSequentialGroup()
                .addGroup(noons1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(noon1S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noon2S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noon3S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noon4S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noon5S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noon6S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noon7S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(noons1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane29, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                    .addComponent(jScrollPane28)
                    .addComponent(jScrollPane27)
                    .addComponent(jScrollPane26)
                    .addComponent(jScrollPane25)
                    .addComponent(jScrollPane24)
                    .addComponent(jScrollPane23)))
        );

        nights1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        night7.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        night7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        night7.setToolTipText("");
        night7.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane30.setViewportView(night7);
        night7.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane30.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        night6.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        night6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane31.setViewportView(night6);
        night6.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane31.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        night5.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        night5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane32.setViewportView(night5);
        night5.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane32.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        night4.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        night4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane33.setViewportView(night4);
        night4.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane33.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        night3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        night3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane34.setViewportView(night3);
        night3.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane34.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        night2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        night2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane35.setViewportView(night2);
        night2.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane35.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        night1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        night1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane36.setViewportView(night1);
        night1.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane36.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        night1S.setModel(new javax.swing.SpinnerNumberModel(1, 0, null, 1));
        night1S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        night2S.setModel(new javax.swing.SpinnerNumberModel(1, 0, null, 1));
        night2S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        night3S.setModel(new javax.swing.SpinnerNumberModel(1, 0, null, 1));
        night3S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        night4S.setModel(new javax.swing.SpinnerNumberModel(1, 0, null, 1));
        night4S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        night5S.setModel(new javax.swing.SpinnerNumberModel(1, 0, null, 1));
        night5S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        night6S.setModel(new javax.swing.SpinnerNumberModel(2, 0, null, 1));
        night6S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        night7S.setModel(new javax.swing.SpinnerNumberModel(2, 0, null, 1));
        night7S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        javax.swing.GroupLayout nights1Layout = new javax.swing.GroupLayout(nights1);
        nights1.setLayout(nights1Layout);
        nights1Layout.setHorizontalGroup(
            nights1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nights1Layout.createSequentialGroup()
                .addGroup(nights1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, nights1Layout.createSequentialGroup()
                        .addComponent(jScrollPane30)
                        .addGap(0, 0, 0)
                        .addComponent(jScrollPane31, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jScrollPane32, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jScrollPane33, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jScrollPane34, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(nights1Layout.createSequentialGroup()
                        .addComponent(night7S, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(night6S, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(night5S, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(night4S, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(night3S, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(nights1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane35, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(night2S, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(nights1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane36, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(night1S, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        nights1Layout.setVerticalGroup(
            nights1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, nights1Layout.createSequentialGroup()
                .addGroup(nights1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(night1S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(night2S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(night3S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(night4S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(night5S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(night6S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(night7S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(nights1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane36, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                    .addComponent(jScrollPane35)
                    .addComponent(jScrollPane34)
                    .addComponent(jScrollPane33)
                    .addComponent(jScrollPane32)
                    .addComponent(jScrollPane31)
                    .addComponent(jScrollPane30)))
        );

        week2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("שבוע שני");

        javax.swing.GroupLayout week2Layout = new javax.swing.GroupLayout(week2);
        week2.setLayout(week2Layout);
        week2Layout.setHorizontalGroup(
            week2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        week2Layout.setVerticalGroup(
            week2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel14)
        );

        days2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        java.awt.FlowLayout flowLayout2 = new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0);
        flowLayout2.setAlignOnBaseline(true);
        days2.setLayout(flowLayout2);

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("יום שבת");
        jLabel15.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jLabel15.setMaximumSize(new java.awt.Dimension(130, 22));
        jLabel15.setMinimumSize(new java.awt.Dimension(130, 22));
        jLabel15.setName(""); // NOI18N
        jLabel15.setPreferredSize(new java.awt.Dimension(132, 22));
        jLabel15.setRequestFocusEnabled(false);
        jLabel15.setVerifyInputWhenFocusTarget(false);
        days2.add(jLabel15);

        jLabel21.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setText("יום שישי");
        jLabel21.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jLabel21.setMaximumSize(new java.awt.Dimension(130, 22));
        jLabel21.setMinimumSize(new java.awt.Dimension(130, 22));
        jLabel21.setPreferredSize(new java.awt.Dimension(132, 22));
        days2.add(jLabel21);

        jLabel22.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel22.setText("יום חמישי");
        jLabel22.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jLabel22.setMaximumSize(new java.awt.Dimension(130, 22));
        jLabel22.setMinimumSize(new java.awt.Dimension(130, 22));
        jLabel22.setPreferredSize(new java.awt.Dimension(130, 22));
        days2.add(jLabel22);

        jLabel23.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel23.setText("יום רביעי");
        jLabel23.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jLabel23.setMaximumSize(new java.awt.Dimension(130, 22));
        jLabel23.setMinimumSize(new java.awt.Dimension(130, 22));
        jLabel23.setPreferredSize(new java.awt.Dimension(130, 22));
        days2.add(jLabel23);

        jLabel24.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel24.setText("יום שלישי");
        jLabel24.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jLabel24.setMaximumSize(new java.awt.Dimension(130, 22));
        jLabel24.setMinimumSize(new java.awt.Dimension(130, 22));
        jLabel24.setPreferredSize(new java.awt.Dimension(130, 22));
        days2.add(jLabel24);

        jLabel25.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel25.setText("יום שני");
        jLabel25.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jLabel25.setMaximumSize(new java.awt.Dimension(130, 22));
        jLabel25.setMinimumSize(new java.awt.Dimension(130, 22));
        jLabel25.setPreferredSize(new java.awt.Dimension(130, 22));
        days2.add(jLabel25);

        jLabel26.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel26.setText("יום ראשון");
        jLabel26.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jLabel26.setMaximumSize(new java.awt.Dimension(130, 22));
        jLabel26.setMinimumSize(new java.awt.Dimension(130, 22));
        jLabel26.setPreferredSize(new java.awt.Dimension(130, 22));
        days2.add(jLabel26);

        jLabel27.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel27.setText("משמרת");
        jLabel27.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jLabel27.setMaximumSize(new java.awt.Dimension(120, 22));
        jLabel27.setMinimumSize(new java.awt.Dimension(120, 22));
        jLabel27.setPreferredSize(new java.awt.Dimension(145, 22));
        days2.add(jLabel27);

        shifts2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jLabel28.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel28.setText("בוקר");
        jLabel28.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel29.setText("כמות מאבטחים במשמרת:");
        jLabel29.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jLabel30.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel30.setText("צהריים");
        jLabel30.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel31.setText("כמות מאבטחים במשמרת:");
        jLabel31.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jLabel32.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel32.setText("לילה");
        jLabel32.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel33.setText("כמות מאבטחים במשמרת:");
        jLabel33.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        javax.swing.GroupLayout shifts2Layout = new javax.swing.GroupLayout(shifts2);
        shifts2.setLayout(shifts2Layout);
        shifts2Layout.setHorizontalGroup(
            shifts2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel29, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel31, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel32, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel33, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        shifts2Layout.setVerticalGroup(
            shifts2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(shifts2Layout.createSequentialGroup()
                .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel32, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))
        );

        mornings2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        Morning14.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        Morning14.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Morning14.setToolTipText("");
        Morning14.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane9.setViewportView(Morning14);
        Morning14.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane9.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        morning13.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        morning13.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane10.setViewportView(morning13);
        morning13.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane10.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        morning12.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        morning12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane11.setViewportView(morning12);
        morning12.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane11.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        morning11.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        morning11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane12.setViewportView(morning11);
        morning11.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane12.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        Morning10.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        Morning10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane13.setViewportView(Morning10);
        Morning10.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane13.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        Morning9.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        Morning9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane14.setViewportView(Morning9);
        Morning9.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane14.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        Morning8.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        Morning8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane15.setViewportView(Morning8);
        Morning8.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane15.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        morning8S.setModel(new javax.swing.SpinnerNumberModel(4, null, null, 1));
        morning8S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        morning9S.setModel(new javax.swing.SpinnerNumberModel(4, null, null, 1));
        morning9S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        morning10S.setModel(new javax.swing.SpinnerNumberModel(4, null, null, 1));
        morning10S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        morning11S.setModel(new javax.swing.SpinnerNumberModel(4, null, null, 1));
        morning11S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        morning12S.setModel(new javax.swing.SpinnerNumberModel(4, null, null, 1));
        morning12S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        morning13S.setModel(new javax.swing.SpinnerNumberModel());
        morning13S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        morning14S.setModel(new javax.swing.SpinnerNumberModel(2, null, null, 1));
        morning14S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        javax.swing.GroupLayout mornings2Layout = new javax.swing.GroupLayout(mornings2);
        mornings2.setLayout(mornings2Layout);
        mornings2Layout.setHorizontalGroup(
            mornings2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mornings2Layout.createSequentialGroup()
                .addGroup(mornings2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mornings2Layout.createSequentialGroup()
                        .addComponent(jScrollPane9)
                        .addGap(0, 0, 0)
                        .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mornings2Layout.createSequentialGroup()
                        .addComponent(morning14S, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(morning13S, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(morning12S, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(morning11S, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(morning10S, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(mornings2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane14, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(morning9S, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(mornings2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane15, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(morning8S, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        mornings2Layout.setVerticalGroup(
            mornings2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mornings2Layout.createSequentialGroup()
                .addGroup(mornings2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(morning8S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(morning9S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(morning10S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(morning11S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(morning12S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(morning13S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(morning14S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(mornings2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane15, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                    .addComponent(jScrollPane14)
                    .addComponent(jScrollPane13)
                    .addComponent(jScrollPane12)
                    .addComponent(jScrollPane11)
                    .addComponent(jScrollPane10)
                    .addComponent(jScrollPane9)))
        );

        noons2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        noon14.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        noon14.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        noon14.setToolTipText("");
        noon14.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane37.setViewportView(noon14);
        noon14.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane37.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        noon13.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        noon13.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane38.setViewportView(noon13);
        noon13.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane38.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        noon12.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        noon12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane39.setViewportView(noon12);
        noon12.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane39.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        noon11.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        noon11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane40.setViewportView(noon11);
        noon11.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane40.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        noon10.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        noon10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane41.setViewportView(noon10);
        noon10.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane41.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        noon9.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        noon9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane42.setViewportView(noon9);
        noon9.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane42.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        noon8.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        noon8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane43.setViewportView(noon8);
        noon8.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane43.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        noon8S.setModel(new javax.swing.SpinnerNumberModel(3, null, null, 1));
        noon8S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        noon9S.setModel(new javax.swing.SpinnerNumberModel(3, null, null, 1));
        noon9S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        noon10S.setModel(new javax.swing.SpinnerNumberModel(3, null, null, 1));
        noon10S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        noon11S.setModel(new javax.swing.SpinnerNumberModel(3, null, null, 1));
        noon11S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        noon12S.setModel(new javax.swing.SpinnerNumberModel(3, null, null, 1));
        noon12S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        noon13S.setModel(new javax.swing.SpinnerNumberModel());
        noon13S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        noon14S.setModel(new javax.swing.SpinnerNumberModel());
        noon14S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        javax.swing.GroupLayout noons2Layout = new javax.swing.GroupLayout(noons2);
        noons2.setLayout(noons2Layout);
        noons2Layout.setHorizontalGroup(
            noons2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(noons2Layout.createSequentialGroup()
                .addGroup(noons2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, noons2Layout.createSequentialGroup()
                        .addComponent(jScrollPane37)
                        .addGap(0, 0, 0)
                        .addComponent(jScrollPane38, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jScrollPane39, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jScrollPane40, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jScrollPane41, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(noons2Layout.createSequentialGroup()
                        .addComponent(noon14S, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(noon13S, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(noon12S, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(noon11S, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(noon10S, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(noons2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane42, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noon9S, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(noons2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane43, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noon8S, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        noons2Layout.setVerticalGroup(
            noons2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, noons2Layout.createSequentialGroup()
                .addGroup(noons2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(noon8S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noon9S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noon10S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noon11S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noon12S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noon13S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noon14S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(noons2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane43, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                    .addComponent(jScrollPane42)
                    .addComponent(jScrollPane41)
                    .addComponent(jScrollPane40)
                    .addComponent(jScrollPane39)
                    .addComponent(jScrollPane38)
                    .addComponent(jScrollPane37)))
        );

        nights2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        night14.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        night14.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        night14.setToolTipText("");
        night14.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane44.setViewportView(night14);
        night14.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane44.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        night13.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        night13.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane45.setViewportView(night13);
        night13.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane45.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        night12.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        night12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane46.setViewportView(night12);
        night12.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane46.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        night11.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        night11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane47.setViewportView(night11);
        night11.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane47.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        night10.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        night10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane48.setViewportView(night10);
        night10.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane48.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        night9.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        night9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane49.setViewportView(night9);
        night9.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane49.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        night8.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        night8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane50.setViewportView(night8);
        night8.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane50.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        night8S.setModel(new javax.swing.SpinnerNumberModel(1, 0, null, 1));
        night8S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        night9S.setModel(new javax.swing.SpinnerNumberModel(1, 0, null, 1));
        night9S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        night10S.setModel(new javax.swing.SpinnerNumberModel(1, 0, null, 1));
        night10S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        night11S.setModel(new javax.swing.SpinnerNumberModel(1, 0, null, 1));
        night11S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        night12S.setModel(new javax.swing.SpinnerNumberModel(1, 0, null, 1));
        night12S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        night13S.setModel(new javax.swing.SpinnerNumberModel(2, 0, null, 1));
        night13S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        night14S.setModel(new javax.swing.SpinnerNumberModel(2, 0, null, 1));
        night14S.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        javax.swing.GroupLayout nights2Layout = new javax.swing.GroupLayout(nights2);
        nights2.setLayout(nights2Layout);
        nights2Layout.setHorizontalGroup(
            nights2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nights2Layout.createSequentialGroup()
                .addGroup(nights2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, nights2Layout.createSequentialGroup()
                        .addComponent(jScrollPane44)
                        .addGap(0, 0, 0)
                        .addComponent(jScrollPane45, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jScrollPane46, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jScrollPane47, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jScrollPane48, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(nights2Layout.createSequentialGroup()
                        .addComponent(night14S, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(night13S, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(night12S, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(night11S, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(night10S, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(nights2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane49, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(night9S, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(nights2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane50, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(night8S, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        nights2Layout.setVerticalGroup(
            nights2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, nights2Layout.createSequentialGroup()
                .addGroup(nights2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(night8S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(night9S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(night10S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(night11S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(night12S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(night13S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(night14S, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(nights2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane50, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                    .addComponent(jScrollPane49)
                    .addComponent(jScrollPane48)
                    .addComponent(jScrollPane47)
                    .addComponent(jScrollPane46)
                    .addComponent(jScrollPane45)
                    .addComponent(jScrollPane44)))
        );

        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("מאבטחים במשמרת מוצ\"ש שבוע לפני:");
        jLabel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        motsashText.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        motsashText.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane17.setViewportView(motsashText);
        motsashText.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane17.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        jLabel43.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel43.setText("תאריך יום ראשון של הסידור:");

        jSpinner5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jSpinner5.setModel(new javax.swing.SpinnerDateModel());
        jSpinner5.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        JSpinner.DateEditor editor = new JSpinner.DateEditor(jSpinner5, "dd.MM.yyyy");
        DateFormatter formatter = (DateFormatter)editor.getTextField().getFormatter();
        formatter.setAllowsInvalid(false); // this makes what you want
        formatter.setOverwriteMode(true);
        jSpinner5.setEditor(editor);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSpinner5, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel43, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(137, 137, 137)
                .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane17, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
            .addComponent(jLabel43, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSpinner5)
        );

        javax.swing.GroupLayout pnlInsertLayout = new javax.swing.GroupLayout(pnlInsert);
        pnlInsert.setLayout(pnlInsertLayout);
        pnlInsertLayout.setHorizontalGroup(
            pnlInsertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(week1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(days1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlInsertLayout.createSequentialGroup()
                .addComponent(mornings1, javax.swing.GroupLayout.PREFERRED_SIZE, 916, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(shifts1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pnlInsertLayout.createSequentialGroup()
                .addGroup(pnlInsertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(noons1, javax.swing.GroupLayout.PREFERRED_SIZE, 916, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nights1, javax.swing.GroupLayout.PREFERRED_SIZE, 916, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noons2, javax.swing.GroupLayout.PREFERRED_SIZE, 916, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nights2, javax.swing.GroupLayout.PREFERRED_SIZE, 916, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(week2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(days2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlInsertLayout.createSequentialGroup()
                .addComponent(mornings2, javax.swing.GroupLayout.PREFERRED_SIZE, 916, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(shifts2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnlInsertLayout.setVerticalGroup(
            pnlInsertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlInsertLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(week1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(days1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(pnlInsertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlInsertLayout.createSequentialGroup()
                        .addComponent(mornings1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(noons1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(nights1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(shifts1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addComponent(week2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(days2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(pnlInsertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlInsertLayout.createSequentialGroup()
                        .addComponent(mornings2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(noons2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(nights2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(shifts2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jspTimeline.setViewportView(pnlInsert);

        pnlBody.add(jspTimeline, "card2");

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jPanel1.setBackground(new java.awt.Color(245, 245, 245));
        jPanel1.setForeground(new java.awt.Color(245, 245, 245));

        quality.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jScrollPane16.setViewportView(quality);
        quality.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane16.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane16, javax.swing.GroupLayout.DEFAULT_SIZE, 1061, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane16, javax.swing.GroupLayout.DEFAULT_SIZE, 1059, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(jPanel1);

        pnlBody.add(jScrollPane1, "card4");

        ResScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jPanel3.setBackground(new java.awt.Color(245, 245, 245));
        jPanel3.setForeground(new java.awt.Color(245, 245, 245));

        String[] list_res_guards = new String[guards.length + 1];
        list_res_guards[0] = "בחר מאבטח...";
        for(int i=1;i<list_res_guards.length;i++){
            list_res_guards[i] = guards[i -1].getName();
        }
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(list_res_guards));
        jComboBox1.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jComboBox1.setEditable(false);
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });

        jLabel37.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel37.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel37.setText("שבוע ראשון");

        jLabel38.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel38.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel38.setText("משמרת בוקר:");

        jSpinner1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(-1, -1, null, 1));

        jSpinner2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jSpinner2.setModel(new javax.swing.SpinnerNumberModel(-1, -1, null, 1));

        jLabel39.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel39.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel39.setText("משמרת צהריים:");

        jLabel40.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel40.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel40.setText("שבוע שני");

        jLabel41.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel41.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel41.setText("משמרת בוקר:");

        jSpinner3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jSpinner3.setModel(new javax.swing.SpinnerNumberModel(-1, -1, null, 1));

        jSpinner4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jSpinner4.setModel(new javax.swing.SpinnerNumberModel(-1, -1, null, 1));

        jLabel42.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel42.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel42.setText("משמרת צהריים:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel37, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(831, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel41, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jSpinner4, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel42, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addComponent(jLabel40, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel38, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel39, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSpinner2, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel41, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSpinner3, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel42, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSpinner4, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE))
                .addContainerGap(283, Short.MAX_VALUE))
        );

        ResScroll.setViewportView(jPanel3);

        pnlBody.add(ResScroll, "card4");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlMenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlBody, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1076, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(pnlMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(pnlBody, javax.swing.GroupLayout.DEFAULT_SIZE, 782, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(1076, 894));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnExitMouseEntered
        btnExit.setBackground(new Color(232,17,35));
    }//GEN-LAST:event_btnExitMouseEntered

    private void btnExitMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnExitMouseExited
        btnExit.setBackground(new Color(255,255,255));
    }//GEN-LAST:event_btnExitMouseExited

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnMaximizeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMaximizeMouseEntered
        btnMaximize.setBackground(new Color(229,229,229));
    }//GEN-LAST:event_btnMaximizeMouseEntered

    private void btnMaximizeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMaximizeMouseExited
        btnMaximize.setBackground(new Color(255,255,255));
    }//GEN-LAST:event_btnMaximizeMouseExited

    private void btnMaximizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMaximizeActionPerformed
        if(maximized){
            //handle fullscreen - taskbar
            Home_Frame.this.setExtendedState(JFrame.MAXIMIZED_BOTH);
            GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();
            Home_Frame.this.setMaximizedBounds(env.getMaximumWindowBounds());
            maximized = false;
        }else{
            setExtendedState(JFrame.NORMAL);
            maximized = true;
        }
    }//GEN-LAST:event_btnMaximizeActionPerformed

    private void btnMinimizeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMinimizeMouseEntered
        btnMinimize.setBackground(new Color(229,229,229));
    }//GEN-LAST:event_btnMinimizeMouseEntered

    private void btnMinimizeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMinimizeMouseExited
        btnMinimize.setBackground(new Color(255,255,255));
    }//GEN-LAST:event_btnMinimizeMouseExited

    private void btnMinimizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMinimizeActionPerformed
        this.setState(Frame.ICONIFIED);
    }//GEN-LAST:event_btnMinimizeActionPerformed

    private void pnlHeaderMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlHeaderMousePressed
        xMouse = evt.getX();
        yMouse = evt.getY();
    }//GEN-LAST:event_pnlHeaderMousePressed

    private void pnlHeaderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlHeaderMouseDragged
        if(maximized){
            int x = evt.getXOnScreen();
            int y = evt.getYOnScreen();
            this.setLocation(x - xMouse, y - yMouse);
        }
    }//GEN-LAST:event_pnlHeaderMouseDragged

    private void reset_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reset_buttonActionPerformed

    if(organize.getText().equals("איפוס איכויות")){
    java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                jDialog1.setSize(520, 235);
                 jDialog1.setVisible(true);
            }
        });
    }
    else{
        for(int i=0;i<guards.length;i++){
            for(int j=0;j<2;j++){
                guards[i].setNum_res_morning(j, -1);
                guards[i].setNum_res_noon(j, -1);
            }
        }
        jSpinner1.setValue(-1);
        jSpinner2.setValue(-1);
        jSpinner3.setValue(-1);
        jSpinner4.setValue(-1);
        jComboBox1.setSelectedIndex(0);
    }
    }//GEN-LAST:event_reset_buttonActionPerformed

    private void btnNewsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewsActionPerformed
        lblNews.setBackground(new Color(0,204,106));
        reset_label.setBackground(new Color(255,0,0));
        lblRestriction.setBackground(new Color(255,255,255));
        reset_button.setText("איפוס איכויות");
        reset_button.setEnabled(true);
        reset_button.setBorder(BorderFactory.createEtchedBorder());
        organize.setText("שמירת שינויים");
        lblTimeline.setBackground(new Color(255,255,255));
        pnlBody.removeAll();
        pnlBody.repaint();
        pnlBody.revalidate();
        pnlBody.add(jScrollPane1);
        pnlBody.repaint();
        pnlBody.revalidate();
        quality.setText("");
        if(quality.getText().equals("")){
        try (InputStream fis = getClass().getResourceAsStream("/Quality.txt"); 
                InputStreamReader isr = new InputStreamReader(fis, StandardCharsets.UTF_8); 
                BufferedReader br = new BufferedReader(isr)) { 
            br.lines().forEach(tempLine -> 
                    {
                    if(!quality.getText().equals(""))
                        quality.setText(quality.getText() + "\n"+ tempLine);
                    else
                        quality.setText(tempLine);
            });
            
        }   catch (IOException ex) {
                Logger.getLogger(Home_Frame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnNewsActionPerformed

    private void btnTimelineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimelineActionPerformed
        lblTimeline.setBackground(new Color(0,204,106));
        reset_label.setBackground(new Color(255,255,255));
        lblRestriction.setBackground(new Color(255,255,255));
        reset_button.setText("");
        reset_button.setEnabled(false);
        reset_button.setBorder(BorderFactory.createEmptyBorder());
        organize.setText("סדר");
        lblNews.setBackground(new Color(255,255,255));
        pnlBody.removeAll();
        pnlBody.repaint();
        pnlBody.revalidate();
        pnlBody.add(jspTimeline);
        pnlBody.repaint();
        pnlBody.revalidate();
    }//GEN-LAST:event_btnTimelineActionPerformed

    private void organizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_organizeActionPerformed

        if(reset_button.getText().equals("")){
            if(safeToStart(true) && !typeError){
            if(Organized_Frame.open == false){
                Organized_Frame.open = true;
            loading();
            preOrganize();
            try {
                    organize();
                    compareOrganized();
                } catch (IOException ex) {
                    Logger.getLogger(Home_Frame.class.getName()).log(Level.SEVERE, null, ex);
            }
            java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                 Organized_Frame organizedFrame;
                try {
                    organizedFrame = new Organized_Frame();
                    organizedFrame.setVisible(true);
                } catch (BadLocationException ex) {
                    Logger.getLogger(Home_Frame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
            }
            else{
                Frame[] frames = Organized_Frame.getFrames();
                for(int i=0;i<frames.length;i++){
                    if(frames[i].getClass() ==Organized_Frame.class)
                        frames[i].dispose();
                }
                Organized_Frame.open = true;
            loading();
            java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                preOrganize();
                try {
                    organize();
                    compareOrganized();
                } catch (IOException ex) {
                    Logger.getLogger(Home_Frame.class.getName()).log(Level.SEVERE, null, ex);
                }
                 Organized_Frame organizedFrame;
                try {
                    organizedFrame = new Organized_Frame();
                    organizedFrame.setVisible(true);
                } catch (BadLocationException ex) {
                    Logger.getLogger(Home_Frame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
            }
             }
             else{
                 
             }
        }
        else{
        if(organize.getText().equals("שמירת שינויים")){
        String temp = "";
        temp = quality.getText();
        try {
            try (OutputStream out = new FileOutputStream(getClass().getResource("/Quality.txt").getPath())) {
                out.write(temp.getBytes());
            }
            //PrintWriter writer = new PrintWriter();
            //writer.print(temp);
            //writer.close();
            System.out.print(temp);
        } catch (IOException ex) {
            Logger.getLogger(Home_Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
        else{
           for(int i=0;i<guards.length;i++){
                if(guards[i].getName().equals(jComboBox1.getSelectedItem())){
                    guards[i].setNum_res_morning(0, (int)jSpinner1.getValue());
                    guards[i].setNum_res_noon(0, (int)jSpinner2.getValue());
                    guards[i].setNum_res_morning(1, (int)jSpinner3.getValue());
                    guards[i].setNum_res_noon(1, (int)jSpinner4.getValue());
                 }
            }
        }
        }
    }//GEN-LAST:event_organizeActionPerformed

    private void resetYesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetYesBtnActionPerformed
    
    String temp="לילה:";
    for(int i=0;i<guards.length;i++){
        temp = temp + "\n" + guards[i].getName() +" - 0"; 
    }
    temp = temp + "\n" +"שבת בוקר:";
    for(int i=0;i<guards.length;i++){
        temp = temp + "\n" + guards[i].getName() +" - 0"; 
    }
    temp = temp + "\n" +"מוצ\"ש/שישי לילה:";
    for(int i=0;i<guards.length;i++){
        temp = temp + "\n" + guards[i].getName() +" - 0"; 
    }
    temp = temp +"\n" + "אחמ\"שים:";
    for(int i=0;i<authority_temp.length;i++){
        if(!authority_temp[i].equals(""))
            temp = temp +"\n" + authority_temp[i];
    }
    temp = temp + "\n" + "קצין מתקן:";
    temp = temp + "\n" + officer;
    File file = new File(getClass().getResource("/Quality.txt").getPath());
        FileWriter writer1 = null;
        FileWriter writer2 = null;
        try {
            writer1 = new FileWriter(file,false);
            PrintWriter print = new PrintWriter(writer1,false);
            print.flush();
            print.close();
            writer1.close();
            writer2 = new FileWriter(getClass().getResource("/Quality.txt").getPath());
            writer2.write(temp);
            writer2.close();
        } catch (IOException ex) {
            Logger.getLogger(Home_Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
    quality.setText(temp);
        try {
            ToGuards();
        } catch (IOException ex) {
            Logger.getLogger(Home_Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
    jDialog1.setVisible(false);
    jDialog1.dispose();
    }//GEN-LAST:event_resetYesBtnActionPerformed

    private void resetNoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetNoBtnActionPerformed
    jDialog1.setVisible(false);
    jDialog1.dispose();
    }//GEN-LAST:event_resetNoBtnActionPerformed

    private void btnRestrictionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRestrictionActionPerformed
        lblTimeline.setBackground(new Color(255,255,255));
        reset_label.setBackground(new Color(255,0,0));
        reset_button.setText("אפס הגבלות");
        reset_button.setEnabled(true);
        reset_button.setBorder(BorderFactory.createEtchedBorder());
        organize.setText("שמירת הגבלה");
        lblNews.setBackground(new Color(255,255,255));
        lblRestriction.setBackground(new Color(0,204,106));
        pnlBody.removeAll();
        pnlBody.repaint();
        pnlBody.revalidate();
        pnlBody.add(ResScroll);
        pnlBody.repaint();
        pnlBody.revalidate();
    }//GEN-LAST:event_btnRestrictionActionPerformed

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
            if(jComboBox1.getSelectedItem().equals("בחר מאבטח...")){
               jSpinner1.setValue(-1);
               jSpinner2.setValue(-1);
               jSpinner3.setValue(-1);
               jSpinner4.setValue(-1);
               return;
           }
        for(int i=0;i<guards.length;i++){
           if(guards[i].getName().equals(jComboBox1.getSelectedItem())){
               jSpinner1.setValue(guards[i].getNum_res_morning(0));
               jSpinner2.setValue(guards[i].getNum_res_noon(0));
               jSpinner3.setValue(guards[i].getNum_res_morning(1));
               jSpinner4.setValue(guards[i].getNum_res_noon(1));
               return;
           }
       }
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    //Getting and Setting GUI Functions
    public void loading(){
        jLabel3.setBackground(Color.RED);
        organize.setText("טוען...");
        organize.setEnabled(false);
        btnNews.setEnabled(false);
        btnTimeline.setEnabled(false);
        btnRestriction.setEnabled(false);
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
                jLabel3.setBackground(Color.orange);
            }
        }, 
        2000 );
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
                jLabel3.setBackground(Color.YELLOW);
            }
        }, 
        4000 );
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
                jLabel3.setBackground(Color.blue);
                organize.setText("סדר");
                organize.setEnabled(true);
                btnNews.setEnabled(true);
                btnTimeline.setEnabled(true);
                btnRestriction.setEnabled(true);
            }
        }, 
        6000);
    }
    public boolean safeToStart(boolean testBypass){
        if(testBypass)
            return true;
        JTextPane[][] texts = new JTextPane[14][3];
        texts[0] = new JTextPane[]{Morning1,noon1,night1};
        texts[1] = new JTextPane[]{Morning2,noon2,night2};
        texts[2] = new JTextPane[]{Morning3,noon3,night3};
        texts[3] = new JTextPane[]{Morning4,noon4,night4};
        texts[4] = new JTextPane[]{Morning5,noon5,night5};
        texts[5] = new JTextPane[]{morning6,noon6,night6};
        texts[6] = new JTextPane[]{Morning7,noon7,night7};
        texts[7] = new JTextPane[]{Morning8,noon8,night8};
        texts[8] = new JTextPane[]{Morning9,noon9,night9};
        texts[9] = new JTextPane[]{Morning10,noon10,night10};
        texts[10] = new JTextPane[]{morning11,noon11,night11};
        texts[11] = new JTextPane[]{morning12,noon12,night12};
        texts[12] = new JTextPane[]{morning13,noon13,night13};
        texts[13] = new JTextPane[]{Morning14,noon14,night14};
        for(int i=0;i<texts.length;i++){
            for(int j=0;j<texts[0].length;j++){
                if(num_sec[i][j] > 0){
                    if(texts[i][j].getText().equals(""))
                        return false;
                }
            }
        }
        if(motsashText.getText().equals(""))
            return false;
        return true;
    }
    public void initialiseTextDays(){
        textDays[0] = new JTextPane[]{Morning1,noon1,night1};
        textDays[1] = new JTextPane[]{Morning2,noon2,night2};
        textDays[2] = new JTextPane[]{Morning3,noon3,night3};
        textDays[3] = new JTextPane[]{Morning4,noon4,night4};
        textDays[4] = new JTextPane[]{Morning5,noon5,night5};
        textDays[5] = new JTextPane[]{morning6,noon6,night6};
        textDays[6] = new JTextPane[]{Morning7,noon7,night7};
        textDays[7] = new JTextPane[]{Morning8,noon8,night8};
        textDays[8] = new JTextPane[]{Morning9,noon9,night9};
        textDays[9] = new JTextPane[]{Morning10,noon10,night10};
        textDays[10] = new JTextPane[]{morning11,noon11,night11};
        textDays[11] = new JTextPane[]{morning12,noon12,night12};
        textDays[12] = new JTextPane[]{morning13,noon13,night13};
        textDays[13] = new JTextPane[]{Morning14,noon14,night14};
    }
    public void inputDays(){
        for(int i=0;i<days.length;i++){
            for(int j=0;j<days[0].length;j++){
                days[i][j] = textDays[i][j].getText();
            }
        }
        motsash = motsashText.getText();
    }
    public void num_sec_input(){
        JSpinner[][] spinners = new JSpinner[14][3];
        spinners[0] = new JSpinner[]{morning1S,noon1S,night1S};
        spinners[1] = new JSpinner[]{morning2S,noon2S,night2S};
        spinners[2] = new JSpinner[]{morning3S,noon3S,night3S};
        spinners[3] = new JSpinner[]{morning4S,noon4S,night4S};
        spinners[4] = new JSpinner[]{morning5S,noon5S,night5S};
        spinners[5] = new JSpinner[]{morning6S,noon6S,night6S};
        spinners[6] = new JSpinner[]{morning7S,noon7S,night7S};
        spinners[7] = new JSpinner[]{morning8S,noon8S,night8S};
        spinners[8] = new JSpinner[]{morning9S,noon9S,night9S};
        spinners[9] = new JSpinner[]{morning10S,noon10S,night10S};
        spinners[10] = new JSpinner[]{morning11S,noon11S,night11S};
        spinners[11] = new JSpinner[]{morning12S,noon12S,night12S};
        spinners[12] = new JSpinner[]{morning13S,noon13S,night13S};
        spinners[13] = new JSpinner[]{morning14S,noon14S,night14S};
        for(int i=0;i<num_sec.length;i++){
            for(int j=0;j<num_sec[0].length;j++){
                num_sec[i][j] = (int)spinners[i][j].getValue();
            }
        }
    }
    //Organizing Functions
    public void typeError(){
        typeError = false;
        String[] temp_names = new String[guards.length];
        for(int i=0;i<guards.length;i++)
            temp_names[i] = guards[i].getName();
        for(int i=0;i<textDays.length;i++){
            for(int j=0;j<textDays[0].length;j++){
                textDays[i][j].setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
                String[] split = textDays[i][j].getText().split("\n");
                for(int k=0;k<split.length;k++){
                    split[k] = RemoveSpace(split[k]);
                    if(!is_in_array(temp_names,split[k])){
                        typeError = true;
                        textDays[i][j].setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 0), 1, true));
                    }
                }
            }
        }
    }
    public void BuildGuards() throws IOException{
        numGuards = 0;
        try (InputStream fis = getClass().getResourceAsStream("/Quality.txt"); 
                InputStreamReader isr = new InputStreamReader(fis, StandardCharsets.UTF_8); 
                BufferedReader br = new BufferedReader(isr)) { 
            br.lines().forEach(line -> 
                    {
                        if(!line.equals("לילה:")){
                            if(line.equals("שבת בוקר:")){
                                stop = true;
                            }
                            else{
                                if(!stop)
                                numGuards++;
                            }
                        }
            });
            
        }
        guards = new Guard[numGuards];
        for(int i=0;i<guards.length;i++)
	    guards[i] = new Guard();
    }
    public void ToGuards() throws IOException{
        number = false;
	kind =0;
        indexCount = 0;
        authority_temp = new String[guards.length];
	quality_temp = new String[guards.length][3];
	for(int i =0 ;i<quality_temp.length;i++){
            guards[i].resetGuard();
            authority_temp[i] = "";
            for(int j=0;j<quality_temp[i].length;j++)
	    	quality_temp[i][j] = "";
        }
        try (InputStream fis = getClass().getResourceAsStream("/Quality.txt"); 
                InputStreamReader isr = new InputStreamReader(fis, StandardCharsets.UTF_8); 
                BufferedReader br = new BufferedReader(isr)) { 
            br.lines().forEach(tempLine -> 
                    {
                tempLine = tempLine.replaceAll(System.lineSeparator(), "");
                switch(tempLine) {
	    	case "שבת בוקר:":
	    		kind = 1;
	    		indexCount=0;
	    		number = false;
	    		break;
	    	case "מוצ\"ש/שישי לילה:":
	    		kind = 2;
	    		indexCount=0;
	    		number = false;
    			break;
	    	case "אחמ\"שים:":
	    		indexCount=0;
	    		kind = 3;
	    		break;
	    	case "קצין מתקן:":
	    		kind = 4;
	    	}
	    	if(kind ==0) {
	    		if(!tempLine.equals("לילה:")) {
	    			for(int i=0;i<tempLine.length();i++) {
	    				char tav = tempLine.charAt(i);
	    				if(tav >= '0' && tav <= '9') {
	    					quality_temp[indexCount][0] += tav; 
	    			    	number = true;
	    				}
	    				else {
	    					if(tav != '-' && tav != ' ') {
	    			    		if(number) {
	    			    			indexCount++;
	    			    			number =false;
	    			    		}
	    			    		guards[indexCount].setName(guards[indexCount].getName() + tav); 
	    				}
	    			}
	    		}
	    	}
	    	}
	    	else {
	    		if(kind ==1) {
	    			if(!tempLine.equals("שבת בוקר:")) {
	    			for(int i=0;i<tempLine.length();i++) {
	    				char tav = tempLine.charAt(i);
	    				if(tav >= '0' && tav <= '9') {
	    					quality_temp[indexCount][1] += tav; 
	    			    	number = true;
	    				}
	    				else {
	    					if(tav != '-' && tav != ' ') {
	    			    		if(number) {
	    			    			indexCount++;
	    			    			number =false;
	    			    		}
	    				}
	    			}
	    		}
	    		}
	    		}
	    		else {
	    			if(kind ==2) {
	    			if(!tempLine.equals("מוצ\"ש/שישי לילה:")) {
	    			for(int i=0;i<tempLine.length();i++) {
	    				char tav = tempLine.charAt(i);
	    				if(tav >= '0' && tav <= '9') {
	    					quality_temp[indexCount][2] += tav; 
	    			    	number = true;
	    				}
	    				else {
	    					if(tav != '-' && tav != ' ') {
	    			    		if(number) {
	    			    			indexCount++;
	    			    			number =false;
	    			    		}
	    				}
	    			}
	    		}
	    		}
	    			}
	    			else {
	    				if(kind ==3) {
	    				if(!tempLine.equals("אחמ\"שים:")) {
	    					authority_temp[indexCount] = tempLine;
	    					indexCount++;
	    				}
	    				}
	    				else {
	    					if(!tempLine.equals("קצין מתקן:")) {
	    						officer = tempLine;
	    					}
	    				}
	    			}
	    		}
	    	}
            });
            
        }

            for(int i=0;i<guards.length;i++) {
	    	guards[i].setName(guards[i].getName().replaceAll(System.getProperty("line.separator"), "")); 
	    	if(is_in_array(authority_temp, guards[i].getName()))
	    		guards[i].setAuthority(true);
                //String To number
                guards[i].setNight(StringToInt(quality_temp[i][0]));
                guards[i].setSat_morning(StringToInt(quality_temp[i][1]));
                guards[i].setSat_night(StringToInt(quality_temp[i][2]));
	    }
    }
    public boolean reOrganize(String[][] days){
        String[] two = new String[guards.length];
        for(int i=0;i<guards.length;i++){
            if(guards[i].getWeeknight()> numGuardsinNights())
            {
                two[i] = guards[i].getName();
            }
            else
                two[i] = "";
        }
        if(isEmpty(two))
            return false;
        while(!isEmpty(two)){
            int index = 0;
            for(int i=0;i<two.length;i++){
                if(!two[i].equals("")){
                    index = i;
                    break;
                }
            }
            int[] num = new int[10];
            for(int i=0;i<num.length;i++){
                if(i != 5 && i != 6){
                    if(isInOrganized(organized[i][2],two[index]))
                        num[i] = i;
                    else
                        num[i] = -1;
                }
            }
             int indexHit = -1;
            int[] available;
            for(int i=0;i<num.length;i++){
                if(i != 5 && i != 6 && num[i] != -1){
                    available = night_Available2(days, i, organized);
                    if(!equal_minus(available)){
                        indexHit = i;
                        break;
                    }
                }
            }
            if(indexHit != -1){
                organized = Add_night_shifts2(indexHit, days, organized);
                if(isInOrganized(organized[indexHit][2],two[index] + ","))
                    organized[indexHit][2] = organized[indexHit][2].replaceAll(two[index]+ ",", "");
                else
                    if(isInOrganized(organized[indexHit][2],"," + two[index]))
                        organized[indexHit][2] = organized[indexHit][2].replaceAll("," + two[index], "");
                    else
                        organized[indexHit][2] = organized[indexHit][2].replaceAll(two[index], "");
                int in = indexGuard(two[index]);
                guards[in].setNight(guards[in].getNight() - 1);
                guards[in].setWeeknight(guards[in].getWeeknight() - 1);
            }
            else{
                indexHit = -1;
                for(int i=0;i<num.length;i++){
                if(i != 5 && i != 6 && num[i] != -1 && i != 4 && i != 9){
                    String[] available_morning = morning_Available(days, i+1, organized);
                    if(!isEmpty(available_morning)){
                        indexHit = i;
                        break;
                    }
                }
            }
                if(indexHit != -1){
                    String added = organized[indexHit + 1][0];
                    organized = Add_morning_shifts(indexHit + 1, days, organized);
                    added = organized[indexHit + 1][0].replaceAll(added, "");
                    added = added.replaceAll(",", "");
                    int indexAdded = indexGuard(added);
                    int[] availableSwitch = null;
                    if(guards[indexAdded].isAuthority())
                        availableSwitch = night_Morning_Available(days, indexHit, organized , true);
                    else
                         if(isMultipleAuthority_array(night_Morning_Available_Names(days, indexHit , organized,true)))
                        availableSwitch = night_Morning_Available(days, indexHit,organized ,true);
                    else
                            availableSwitch = night_Morning_Available(days, indexHit,organized ,false);
                    if(!equal_minus(availableSwitch)){
                    int min = minQualityNight(availableSwitch);
                    organized[indexHit][2] = organized[indexHit][2].replaceFirst(",", "");
                    organized[indexHit][2] = RemoveSpace(organized[indexHit][2]);
                    if(organized[indexHit][2].equals(""))
                       organized[indexHit][2] += guards[min].getName();
                    else
                        organized[indexHit][2] += ","+ guards[min].getName();
                    guards[min].setNight(guards[min].getNight() + 1);
                    guards[min].setWeeknight(guards[min].getWeeknight() + 1);
                    guards[min].setMorning(guards[min].getMorning() - 1);
                    guards[min].addToMorning_min(dayToMin(indexHit), -1);
                    if(isInOrganized(organized[indexHit][2],two[index] + ","))
                        organized[indexHit][2] = organized[indexHit][2].replaceAll(two[index]+ ",", "");
                        else
                            if(isInOrganized(organized[indexHit][2],"," + two[index]))
                                organized[indexHit][2] = organized[indexHit][2].replaceAll("," + two[index], "");
                            else
                                organized[indexHit][2] = organized[indexHit][2].replaceAll(two[index], "");
                    int in = indexGuard(two[index]);
                    guards[in].setNight(guards[in].getNight() - 1);
                    guards[in].setWeeknight(guards[in].getWeeknight() - 1);
                    }
                    else{
                        if(isInOrganized(organized[indexHit + 1][0],added + ","))
                        organized[indexHit + 1][0] = organized[indexHit + 1][0].replaceAll(added+ ",", "");
                        else
                            if(isInOrganized(organized[indexHit + 1][0],"," + two[index]))
                                organized[indexHit + 1][0] = organized[indexHit + 1][0].replaceAll("," + added, "");
                            else
                                organized[indexHit + 1][0] = organized[indexHit + 1][0].replaceAll(added, "");
                        guards[indexAdded].setMorning(guards[indexAdded].getMorning() - 1);
                        guards[indexAdded].addToMorning_min(dayToMin(indexHit + 1), -1);
                    }
            }
                else{
                  indexHit = -1;
                  int[] available_morning = null;
                for(int i=0;i<num.length;i++){
                if(i != 5 && i != 6 && num[i] != -1 && i != 4 && i != 9){
                    if(guards[index].isAuthority())
                        available_morning = night_Morning_Available(days, i , organized,true);
                    else
                        if(isMultipleAuthority_array(night_Morning_Available_Names(days, i , organized,true)))
                        available_morning = night_Morning_Available(days, i,organized ,true);
                    else
                            available_morning = night_Morning_Available(days, i,organized ,false);
                    if(!equal_minus(available_morning)){
                        indexHit = i;
                        break;
                    }
                    }
                }
                if(indexHit != -1){
                        int min = minQualityNight(available_morning);
                        if(isInOrganized(organized[indexHit+1][0],guards[min].getName() + ","))
                            organized[indexHit+1][0] = organized[indexHit+1][0].replaceAll(guards[min].getName()+ ",", "");
                        else
                            if(isInOrganized(organized[indexHit+1][0],"," + guards[min].getName()))
                                organized[indexHit + 1][0] = organized[indexHit + 1][0].replaceAll("," + guards[min].getName(), "");
                            else
                                organized[indexHit + 1][0] = organized[indexHit + 1][0].replaceAll(guards[min].getName(), "");
                        guards[min].setMorning(guards[min].getMorning() - 1);
                        guards[min].addToMorning_min(dayToMin(indexHit + 1), -1);
                        organized = Add_night_shifts2(indexHit, days, organized);
                        if(isInOrganized(organized[indexHit][2],two[index] + ","))
                        organized[indexHit][2] = organized[indexHit][2].replaceAll(two[index]+ ",", "");
                        else
                            if(isInOrganized(organized[indexHit][2],"," + two[index]))
                                organized[indexHit][2] = organized[indexHit][2].replaceAll("," + two[index], "");
                            else
                                organized[indexHit][2] = organized[indexHit][2].replaceAll(two[index], "");
                        organized[indexHit + 1][0] = RemoveSpace(organized[indexHit + 1][0]);
                        if(organized[indexHit + 1][0].equals(""))
                            organized[indexHit + 1][0] += guards[index].getName();
                        else
                            organized[indexHit + 1][0] += ","+ guards[index].getName();
                        int in = indexGuard(two[index]);
                        guards[in].setNight(guards[in].getNight() - 1);
                        guards[in].setWeeknight(guards[in].getWeeknight() - 1);
                        guards[in].setMorning(guards[in].getMorning() + 1);
                        guards[in].addToMorning_min(dayToMin(indexHit + 1), 1);
                }
                else{
                    return false;
                }
                }
            }
            fixSpell();
            two[index] = "";
        }
        return true;
    }
    public void compareOrganized() throws IOException{
        //Comparing Resaults and Picking the BEST ONE
        if(notes.length() == 0)
            return;
        String[][] temp = organized;
        String temp_notes = notes;
        Guard[] temp_guards = new Guard[guards.length];
        temp_guards = guards;
        for(int i=0;i<1000;i++){
        organize();
        if(sumNotes(temp_notes) > sumNotes(notes)){
            temp = organized;
            temp_notes = notes;
            temp_guards =guards;
        }
        if(notes.length() == 0)
            return;
        }
        organized = temp;
        notes = temp_notes;
        guards = temp_guards;
        for(int i=0;i<guards.length;i++){
            guards[i].reCount(organized);
        }
    }
    public void reset1st(){
        String temp="לילה:";
    for(int i=0;i<guards.length;i++){
        temp = temp + "\n" + guards[i].getName() +" - 0"; 
    }
    temp = temp + "\n" +"שבת בוקר:";
    for(int i=0;i<guards.length;i++){
        temp = temp + "\n" + guards[i].getName() +" - 0"; 
    }
    temp = temp + "\n" +"מוצ\"ש/שישי לילה:";
    for(int i=0;i<guards.length;i++){
        temp = temp + "\n" + guards[i].getName() +" - 0"; 
    }
    temp = temp +"\n" + "אחמ\"שים:";
    for(int i=0;i<authority_temp.length;i++){
        if(!authority_temp[i].equals(""))
            temp = temp +"\n" + authority_temp[i];
    }
    temp = temp + "\n" + "קצין מתקן:";
    temp = temp + "\n" + officer;
    quality.setText(temp);
    for(int i=0;i<guards.length;i++){
        guards[i].setNight(0);
        guards[i].setSat_morning(0);
        guards[i].setSat_night(0);
    }
    }
    public void preOrganize(){
        initialiseTextDays();
        num_sec_input();
        days= ResetArray2(days);
        //inputDays();
        days = inputDays_test(days);
        jSpinner5.getValue();
        //Date
        Date date = (Date)jSpinner5.getValue();
        dates[0] = LocalDate.of(date.getYear() + 1900,date.getMonth() + 1,date.getDate());
        for(int i=1;i<dates.length;i++){
            dates[i] = dates[0].plusDays(i);
        }
    }
    public void organize() throws IOException{
            notes = "";
            ToGuards();
	    organized = new String[14][3];
	    organized =ResetArray2(organized);
	    //Adding input for test DELETE AFTER GUI
            if(checkDate(dates[0]))
                reset1st();
            //Morning Shifts & Night Shifts with Quality
            for(int j=0;j<num_sec[0][0];j++)
	    	organized = Add_morning_shifts(0, days, organized);
            for(int i=1;i<14;i++) {
                if(i == 7){
                    for(int j=0;j<guards.length;j++){
                        guards[j].setMornin_week1(guards[j].getMorning());
                        guards[j].setMorning(0);
                    }
                }
                if(i < 12){
	    	if(i < 5 || i > 6) {
                    for(int j=0;j<num_sec[i][0];j++)
	    		organized = Add_morning_shifts(i, days, organized);
                    if(i != 7)
                        for(int j=0;j<num_sec[i-1][2];j++)
	    			organized = Add_night_shifts2(i-1,days,organized);
                    if(i == 4 || i == 11)
                        for(int j=0;j<num_sec[i][2];j++)
	    			organized = Add_night_shifts2(i,days,organized);
                }
                }
                if(i == 7){
                    for(int j=0;j<num_sec[i-1][2];j++)
	    			organized = Add_Weekend_Night_shifts(i - 1, days, organized);
                    for(int j=0;j<num_sec[i-1][0];j++)
	    		organized = Add_weekend_Morning_shifts(i - 1, days, organized);
                }
                if(i == 5 || i == 12){
                    for(int j=0;j<num_sec[i][2];j++)
	    			organized = Add_Weekend_Night_shifts(i, days, organized);
                }
                if(i == 13){
                    for(int j=0;j<num_sec[i][2];j++)
	    			organized = Add_Weekend_Night_shifts(i, days, organized);
                    for(int j=0;j<num_sec[i][0];j++)
	    		organized = Add_weekend_Morning_shifts(i, days, organized);
                }
                if(checkDate(dates[i]))
                    reset1st();
            }
            //ReOrganizing for Doubles
            reOrganize(days);
            for(int i=0;i<guards.length;i++){
                if(guards[i].getWeeknight() > numGuardsinNights() )
                    for(int j=0;j<guards[i].getWeeknight();j++)
                        notes += "מישהו נמצא ב" +guards[i].getWeeknight() +"  לילות או יותר"  +"\n";
            }
	    //After-Noon Shifts
	    for(int i=0;i<12;i++) {
                if(i == 7){
                    for(int j=0;j<guards.length;j++){
                        guards[j].setNoon_week1(guards[j].getAfter_noon());
                        guards[j].setAfter_noon(0);
                    }
                }
	    	if(i < 5 || i > 6) {
	    		for(int j=0;j<num_sec[i][1];j++)
	    			organized = Add_noon_shifts(i, days, organized);
	    	}
	    }
            //ChECKING FOR MINIMUM SHIFTS
            for(int i=0;i<guards.length;i++){
                guards[i].countServed(days);
                guards[i].countGot(organized);
                checkMinShifts2(guards[i]);
            }
            //Checking For Empty Shifts
            checkEmptyShift(organized);
    }
    public void checkEmptyShift(String[][] organized){
        for(int i=0;i<organized.length;i++){
            for(int j=0;j<organized[0].length;j++){
                organized[i][j] = RemoveSpace(organized[i][j]);
                if(num_sec[i][j] > 0  && organized[i][j].equals(""))
                        notes += "אין אף אחד במשמרת  " + numberToDay(i) + "\n";
            }
        }
    }
    public void checkMinShifts2(Guard guard){
         if(guard.getNum_res_morning(0) != -1 || guard.getNum_res_noon(0) != -1){
             if(guard.getNum_res_morning(0) == -1 && guard.getNum_res_noon(0) == -1){
                 if((guard.getNum_res_morning(0) < 3 || guard.getNum_res_noon(0) < 2)){
                     if(guard.getNum_morning_min(0) != guard.getNum_res_morning(0) || guard.getNum_noon_min(0) != guard.getNum_res_noon(0))
                         notes += guard.getName() + "לא קיבל מינימום בשבוע ראשון והגיש מינימום או פחות " + "\n";
                 }
                 if(guard.getNum_res_morning(0) > 2 && guard.getNum_res_noon(0) > 1 && guard.getShifts_week1() > 2){
                     if((guard.getNum_morning_min(0) < 2 || guard.getNum_res_noon(0) < 1))
                         notes += guard.getName() + " לא קיבל מינימום בשבוע ראשון" + "\n";
                 }
             }
             else{
                 if(guard.getNum_res_morning(0) != -1){
                     if(guard.getNum_res_morning(0) < 3){
                         if(guard.getNum_morning_min(0) != guard.getNum_res_morning(0) || guard.getNum_noon_min(0) < 1)
                             notes += guard.getName() + "לא קיבל מינימום בשבוע ראשון והגיש מינימום או פחות   " + "\n";
                     }
                     if(guard.getNum_res_morning(0) > 2 && guard.getShifts_week1() > 2){
                         if(guard.getNum_morning_min(0) < 2 || guard.getNum_res_noon(0) < 1)
                              notes += guard.getName() + " לא קיבל מינימום בשבוע ראשון" + "\n";
                     }
                 }
                 else{
                     if(guard.getNum_res_noon(0) != -1){
                     if(guard.getNum_res_noon(0) < 3){
                         if(guard.getNum_noon_min(0) != guard.getNum_res_noon(0) || guard.getNum_morning_min(0) < 2)
                             notes += guard.getName() + "לא קיבל מינימום בשבוע ראשון והגיש מינימום או פחות " + "\n";
                     }
                     if(guard.getNum_res_noon(0) > 1 && guard.getShifts_week1() > 2){
                         if(guard.getNum_morning_min(0) < 2 || guard.getNum_res_noon(0) < 1)
                              notes += guard.getName() + " לא קיבל מינימום בשבוע ראשון" + "\n";
                     }
                 }
                 }
             }
         }
         else{
            if(guard.getShifts_week1() > 2 && (guard.getNum_morning_min(0) < 2 || guard.getNum_noon_min(0) < 1))
                notes += guard.getName() + " לא קיבל מינימום בשבוע ראשון" + "\n";
            if(guard.getShifts_week1() < 3 && (guard.getNum_morning_min(0) + guard.getNum_noon_min(0))  < guard.getShifts_week1())
                notes += guard.getName() + "לא קיבל מינימום בשבוע ראשון והגיש מינימום או פחות " + "\n";
         }
         if(guard.getNum_res_morning(1) != -1 || guard.getNum_res_noon(1) != -1){
             if(guard.getNum_res_morning(1) == -1 && guard.getNum_res_noon(1) == -1){
                 if((guard.getNum_res_morning(1) < 3 || guard.getNum_res_noon(1) < 2) ){
                     if(guard.getNum_morning_min(1) != guard.getNum_res_morning(1) || guard.getNum_noon_min(1) != guard.getNum_res_noon(1))
                         notes += guard.getName() + "לא קיבל מינימום בשבוע שני והגיש מינימום או פחות   " + "\n";
                 }
                 if(guard.getNum_res_morning(1) > 2 && guard.getNum_res_noon(1) > 1 && guard.getShifts_week2() > 2){
                     if((guard.getNum_morning_min(1) < 2 || guard.getNum_res_noon(1) < 1))
                         notes += guard.getName() + " לא קיבל מינימום בשבוע שני" + "\n";
                 }
             }
             else{
                 if(guard.getNum_res_morning(1) != -1){
                     if(guard.getNum_res_morning(1) < 3 ){
                         if(guard.getNum_morning_min(1) != guard.getNum_res_morning(1) || guard.getNum_noon_min(1) < 1)
                             notes += guard.getName() + "לא קיבל מינימום בשבוע שני והגיש מינימום או פחות " + "\n";
                     }
                     if(guard.getNum_res_morning(1) > 2 && guard.getShifts_week2() > 2){
                         if(guard.getNum_morning_min(1) < 2 || guard.getNum_res_noon(1) < 1)
                              notes += guard.getName() + " לא קיבל מינימום בשבוע שני" + "\n";
                     }
                 }
                 else{
                     if(guard.getNum_res_noon(1) != -1){
                     if(guard.getNum_res_noon(1) < 3){
                         if(guard.getNum_noon_min(1) != guard.getNum_res_noon(1) || guard.getNum_morning_min(1) < 2)
                             notes += guard.getName() + "לא קיבל מינימום בשבוע שני והגיש מינימום או פחות " + "\n";
                     }
                     if(guard.getNum_res_noon(1) > 1 && guard.getShifts_week2() > 2){
                         if(guard.getNum_morning_min(1) < 2 || guard.getNum_res_noon(1) < 1)
                              notes += guard.getName() + " לא קיבל מינימום בשבוע שני" + "\n";
                     }
                 }
                 }
             }
         }
         else{
            if(guard.getShifts_week2() > 2 && (guard.getNum_morning_min(1) < 2 || guard.getNum_noon_min(1) < 1))
                notes += guard.getName() + " לא קיבל מינימום בשבוע שני" + "\n";
            if(guard.getShifts_week2() < 3 && (guard.getNum_morning_min(1) + guard.getNum_noon_min(1))  < guard.getShifts_week2())
                notes += guard.getName() + "לא קיבל מינימום בשבוע שני והגיש מינימום או פחות  " + "\n";
         }
    }
    public void checkMinShifts(Guard guard){
        if(guard.getNum_res_morning(0) != -1 || guard.getNum_res_noon(0) != -1){
            if(guard.getNum_res_morning(0) == -1 && guard.getNum_res_noon(0) == -1){
                if(guard.getNum_res_morning(0) > 2 && guard.getNum_res_noon(0) > 1 && guard.getShifts_week1() > 2){
                if(guard.getNum_morning_min(0) < 2 ||  guard.getNum_noon_min(0) < 1)
                    notes += guard.getName() + " לא קיבל מינימום בשבוע ראשון" + "\n";
            }
            else{
                if(guard.getShifts_week1() > 2){
                    if(guard.getNum_res_morning(0) != guard.getNum_morning_min(0) || guard.getNum_res_noon(0) !=  guard.getNum_noon_min(0))
                        notes += guard.getName() + " לא קיבל מינימום בשבוע ראשון" + "\n";
                }
                else{
                 if(guard.getNum_res_morning(0) != guard.getNum_morning_min(0) || guard.getNum_res_noon(0) !=  guard.getNum_noon_min(0))
                    notes += guard.getName() + "לא קיבל מינימום בשבוע ראשון והגיש מינימום או פחות" + "\n";
                }
            }
            }
            else{
                if(guard.getNum_res_morning(0) == -1){
                    if(guard.getNum_res_morning(0) > 2 ){
                        if(guard.getNum_Serv_morning(0) > 2 && guard.getNum_morning_min(0) < 2)
                            notes += guard.getName() + " לא קיבל מינימום בשבוע ראשון" + "\n";
                    }
                    else{
                        
                    }
                }
                else{
                    
                }
            }
        }
        else{
            if(guard.getShifts_week1() > 2 && (guard.getNum_morning_min(0) < 2 || guard.getNum_noon_min(0) < 1))
                notes += guard.getName() + " לא קיבל מינימום בשבוע ראשון" + "\n";
            if(guard.getShifts_week1() <= 2 && (guard.getNum_morning_min(0) + guard.getNum_noon_min(0))  != guard.getShifts_week1())
                notes += guard.getName() + "לא קיבל מינימום בשבוע ראשון והגיש מינימום או פחות" + "\n";
        }
        if(guard.getNum_res_morning(1) != -1 || guard.getNum_res_noon(1) != -1){
            if(guard.getNum_res_morning(1) > 2 && guard.getNum_res_noon(1) > 1 && guard.getShifts_week2() > 2){
                if(guard.getNum_morning_min(1) < 2 ||  guard.getNum_noon_min(1) < 1)
                    notes += guard.getName() + " לא קיבל מינימום בשבוע שני" + "\n";
            }
            else{
                if(guard.getShifts_week2() > 2){
                    if(guard.getNum_res_morning(1) != guard.getNum_morning_min(1) || guard.getNum_res_noon(1) !=  guard.getNum_noon_min(1))
                        notes += guard.getName() + " לא קיבל מינימום בשבוע שני" + "\n";
                }
                else{
                 if(guard.getNum_res_morning(1) != guard.getNum_morning_min(1) || guard.getNum_res_noon(1) !=  guard.getNum_noon_min(1))
                    notes += guard.getName() + "לא קיבל מינימום בשבוע שני והגיש מינימום או פחות" + "\n";
                }
            }
        }
        else{
            if(guard.getShifts_week2() > 2 && (guard.getNum_morning_min(1) < 2 || guard.getNum_noon_min(1) < 1))
                notes += guard.getName() + " לא קיבל מינימום בשבוע שני" + "\n";
            if(guard.getShifts_week2() <= 2 && (guard.getNum_morning_min(1) + guard.getNum_noon_min(1))  != guard.getShifts_week2())
                notes += guard.getName() + "לא קיבל מינימום בשבוע שני והגיש מינימום או פחות" + "\n";
        }
    }
    public int ScoreNote(String line){
        int score = 0;
        if(line.contains("  הוא האחמ\"ש ביום  "))
            score = 1;
        if(line.contains("אין מספיק אנשים ביום"))
            score = 2;     
        if(line.contains("אין אחמש ביום "))
            score = 4;
        if(line.contains("חסר במשמרת לילה ביום  "))
            score = 11;
        if(line.contains("יש פחות אנשים ביום "))
            score = 3;
        if(line.contains("לא קיבל מינימום"))
            score = 9;
        if(line.contains("לילות או יותר"))
            score = 12;
        if(line.contains("חסר במשמרת בוקר"))
            score = 10;
        if(line.contains("הגיש מינימום או פחות"))
            score = 8;
        if(line.contains("חסר מישהו במשמרת לילה סופ\"ש "))
            score = 11;
        if(line.contains("חסר מישהו במשמרת בוקר סופ\"ש "))
            score = 11;
        if(line.contains("אין אף אחד במשמרת"))
            score = 99999;
        return score;
    }
    public int sumNotes(String Notes){
        int sum = 0;
        String[] split = Notes.split("\n");
        for(int i=0;i<split.length;i++)
            sum += ScoreNote(split[i]);
        return sum;
    }
    //Adding and Available Functions
    public static int[] night_Available2(String[][] days,int day,String[][] organized) {
        int[] available = new int[guards.length];
        for(int i=0;i<available.length;i++){
            if(isInDay(days[day][2],guards[i].getName()) && !isInOrganized(organized[day][1],guards[i].getName()) 
                    && !isInOrganized(organized[day+1][0],guards[i].getName()) && !isInOrganized(organized[day][2],guards[i].getName())
                    && !night_week_check(day, organized, guards[i].getName()))
                available[i] = guards[i].getNight();
            else
                available[i] = -1;
        }
        return available;
    }
    public static int[] night_Morning_Available(String[][] days,int day,String[][] organized,boolean authority){
        String[] temp = new String[guards.length];
        for(int i=0;i<temp.length;i++){
            temp[i] = "";
        }
        String[] morning = organized[day+1][0].split(",");
        for(int i=0;i<morning.length;i++)
            morning[i] = RemoveSpace(morning[i]);
        for(int i=0;i<morning.length;i++){
            if(isInDay(days[day][2],morning[i]))
                temp[i] = morning[i];
        }
        int[] available = new int[guards.length];
        for(int i=0;i<available.length;i++){
            available[i] = -1;
        }
        for(int i=0;i<temp.length;i++){
            if(!temp[i].equals("")){
                available[indexGuard(temp[i])] = guards[indexGuard(temp[i])].getNight();
            }
        }
        for(int i=0;i<available.length;i++){
            if(available[i] != -1){
                if(guards[i].isAuthority() && !authority)
                    available[i] = -1;
            }
        }
        for(int i=0;i<available.length;i++){
            if(available[i] != -1){
                if(guards[i].getNum_res_morning(dayToMin(day)) != -1)
                    if(guards[i].getNum_res_morning(dayToMin(day)) != guards[i].getMorning())
                    available[i] = -1;
            }
        }
        return available;
    }
    public static String[] night_Morning_Available_Names(String[][] days,int day,String[][] organized,boolean authority){
        String[] temp = new String[guards.length];
        for(int i=0;i<temp.length;i++){
            temp[i] = "";
        }
        String[] morning = organized[day+1][0].split(",");
        for(int i=0;i<morning.length;i++){
            morning[i] = RemoveSpace(morning[i]);
            if(isInDay(days[day][2],morning[i]))
                temp[i] = morning[i];
        }
        String[] available = new String[guards.length];
        for(int i=0;i<available.length;i++){
            available[i] = "";
        }
        for(int i=0;i<temp.length;i++){
            if(!temp[i].equals("")){
                available[indexGuard(temp[i])] = guards[indexGuard(temp[i])].getName();
            }
        }
        for(int i=0;i<available.length;i++){
            if(available[i] != ""){
                if(guards[i].isAuthority() && !authority)
                    available[i] = "";
            }
        }
        return available;
    }
    public static String[][] Add_night_shifts2(int day,String[][] days,String[][] organized){
        int[] available = night_Available2(days,day,organized);
        if(!equal_minus(available)) {
		if(!array_equal(available)) {
			int min = minQualityNight(available);
                        organized[day][2] = RemoveSpace(organized[day][2]);
			if(organized[day][2].equals(""))
                                    organized[day][2] = guards[min].getName() ;
                                else
                                    organized[day][2] +=  "," + guards[min].getName();
			guards[min].setNight((guards[min].getNight() + 1));
			guards[min].setWeeknight(guards[min].getWeeknight() + 1);
		}
		else {
			Random r = new Random();
	    	int random = r.nextInt(guards.length);
	    	while(available[random] == -1)
	    		random = r.nextInt(guards.length);
                organized[day][2] = RemoveSpace(organized[day][2]);
	    	if(organized[day][2].equals(""))
                    organized[day][2] = guards[random].getName() ;
                else
                    organized[day][2] +=  "," + guards[random].getName();
                        guards[random].setNight((guards[random].getNight() + 1));
			guards[random].setWeeknight(guards[random].getWeeknight() + 1);
		}
		}
        else{
            String[] morning_available = morning_Available(days,day+1,organized);
            if(!isEmpty(morning_available)){
                String temp = organized[day+1][0];
                organized = Add_morning_shifts(day+1,days,organized);
                String added = organized[day+1][0].replaceAll(temp, "");
                added = added.replaceAll(",", "");
                int indexGuard = indexGuard(added);
                int[] availableSwitchShifts;
                if(guards[indexGuard].isAuthority())
                    availableSwitchShifts = night_Morning_Available(days, day, organized,true);
                else
                    availableSwitchShifts = night_Morning_Available(days, day, organized,false);
                if(!equal_minus(availableSwitchShifts)) {
                    if(!array_equal(availableSwitchShifts)) {
			int min = minQuality(availableSwitchShifts);
                        organized[day][2] = RemoveSpace(organized[day][2]);
			if(organized[day][2].equals(""))
                                    organized[day][2] = guards[min].getName() ;
                                else
                                    organized[day][2] +=  "," + guards[min].getName();
			guards[min].setNight((guards[min].getNight() + 1));
			guards[min].setWeeknight(guards[min].getWeeknight() + 1);
                        guards[min].setMorning(guards[min].getMorning() - 1);
                        guards[min].addToMorning_min(dayToMin(day), -1);
                        organized[day+1][0] = organized[day+1][0].replaceAll(guards[min].getName(), "");
                    }
                    else {
			Random r = new Random();
                        int random = r.nextInt(guards.length);
                        while(availableSwitchShifts[random] == -1)
                            random = r.nextInt(guards.length);
                        organized[day][2] = RemoveSpace(organized[day][2]);
                        if(organized[day][2].equals(""))
                             organized[day][2] = guards[random].getName() ;
                         else
                             organized[day][2] +=  "," + guards[random].getName();
                        guards[random].setNight((guards[random].getNight() + 1));
                        guards[random].setWeeknight(guards[random].getWeeknight() + 1);
                        guards[random].setMorning(guards[random].getMorning() - 1);
                        guards[random].addToMorning_min(dayToMin(day), -1);
                        organized[day+1][0] = organized[day+1][0].replaceAll(guards[random].getName(), "");
		}
		}
                else{
                  notes += "חסר במשמרת לילה ביום  " + numberToDay(day) + "\n";
                }
            }
            else{
                notes += "חסר במשמרת לילה ביום  " + numberToDay(day) + "\n";
            }
        }
        return organized;
    }
    public static int[] available_weekend_morning(int day,String[][] days,String[][] organized) {
		int[] shifts = new int [guards.length];
		for(int i=0;i<shifts.length;i++) {
			if(isInDay(days[day][0],guards[i].getName()) && !isInOrganized(organized[day][2],guards[i].getName()) 
					&& !isInOrganized(organized[day-1][2],guards[i].getName()) && guards[i].getSat_morning_week() == 0)
				shifts[i] = guards[i].getSat_morning();
			else
				shifts[i] = -1;
		}
		return shifts;
	}
    public static String[][] Add_weekend_Morning_shifts(int day,String[][] days,String[][] organized){
		int[] shifts = available_weekend_morning(day,days,organized);
                if(!equal_minus(shifts)){
		if(!array_equal(shifts)) {
			int min = minQuality(shifts);
                        organized[day][0] = RemoveSpace(organized[day][0]);
                        if(organized[day][0].equals(""))
                            organized[day][0] = guards[min].getName();
                        else
                            organized[day][0] += ","+guards[min].getName();
			guards[min].setSat_morning(guards[min].getSat_morning() + 1);
                        guards[min].setSat_morning_week(guards[min].getSat_morning_week() + 1);
		}
		else {
			Random r = new Random();
	    	int random = r.nextInt(guards.length);
	    	while(shifts[random] == -1)
	    		random = r.nextInt(guards.length);
                organized[day][0] = RemoveSpace(organized[day][0]);
	    	if(organized[day][0].equals(""))
                            organized[day][0] = guards[random].getName();
                        else
                            organized[day][0] += ","+guards[random].getName();
		guards[random].setSat_morning(guards[random].getSat_morning() + 1);
                guards[random].setSat_morning_week(guards[random].getSat_morning_week() + 1);
		}
                }
                else{
                    notes += "חסר מישהו במשמרת בוקר סופ\"ש " + numberToDay(day) + "\n";
                }
		return organized;
	}
    public static String[][] Add_Weekend_Night_shifts(int day,String[][] days,String[][] organized){
		int[] shifts =  available_weekend_nights(day,days,organized);
                if(!equal_minus(shifts)){
		if(!array_equal(shifts)) {
			int min = minQuality(shifts);
                        organized[day][2] = RemoveSpace(organized[day][2]);
                        if(organized[day][2].equals(""))
                            organized[day][2] = guards[min].getName();
                        else
                            organized[day][2] += "," +guards[min].getName();
			guards[min].setSat_night(guards[min].getSat_night() + 1);
                        guards[min].setSat_night_week(guards[min].getSat_night_week() + 1);
		}
		else {
			Random r = new Random();
	    	int random = r.nextInt(guards.length);
	    	while(shifts[random] == -1)
	    		random = r.nextInt(guards.length);
                organized[day][2] = RemoveSpace(organized[day][2]);
	    	if(organized[day][2].equals(""))
                            organized[day][2] = guards[random].getName();
                        else
                            organized[day][2] += "," +guards[random].getName();
		guards[random].setSat_night(guards[random].getSat_night() + 1);
                guards[random].setSat_night_week(guards[random].getSat_night_week() + 1);
		}
                }
                else{
                    notes += "חסר מישהו במשמרת לילה סופ\"ש " + numberToDay(day) + "\n";
                }
		return organized;
	}
    public static int[] available_weekend_nights(int day,String[][] days,String[][] organized) {
		int[] shifts = new int [guards.length];
		for(int i=0;i<shifts.length;i++) {
			if(isInDay(days[day][2],guards[i].getName()) && !isInOrganized(organized[day][2],guards[i].getName()) && guards[i].getSat_night_week() == 0)
			{
				if(day == 5 || day == 12) {
					if(!isInOrganized(organized[day+1][2],guards[i].getName()))
						shifts[i] = guards[i].getSat_night();
					else
						shifts[i] = -1;
				}
				else {
					if(day == 6) {
						if(!isInOrganized(organized[day-1][2],guards[i].getName()) && !isInOrganized(organized[day+1][0],guards[i].getName()))
							shifts[i] = guards[i].getSat_night();
						else
							shifts[i] = -1;
					}
					else {
					if(!isInOrganized(organized[day-1][2],guards[i].getName()))
						shifts[i] = guards[i].getSat_night();
					else
						shifts[i] = -1;
					}
				}
			}
			else {
				shifts[i] = -1;
			}
		}
		return shifts;
	}
    public static String[][] Add_morning_shifts(int day,String[][] days,String[][] organized) {
	    String[] available ;
	    int[] tempShifts = new int[guards.length];
	    Random r = new Random();
    	int random = r.nextInt(guards.length);
    	available = morning_Available(days, day, organized);
    	for(int j=0;j<guards.length;j++) {
	    	if(!available[j].equals(""))
	    		tempShifts[j] = guards[j].getMorning();
	    	else
	    		tempShifts[j] = -1;
	    }
    	if(!organized[day][0].equals("")) {
    	if(!isEmpty(available)) {
		if(equal_minus(tempShifts)) {
			for(int i=0;i<tempShifts.length;i++) {
				tempShifts[i] = guards[i].getMorning();
			}
		}
		if(array_equal(tempShifts)) {
    		while(!is_in_array(available,guards[random].getName())) {
    			random = r.nextInt(guards.length);
    		}
                organized[day][0] = RemoveSpace(organized[day][0]);
                if(organized[day][0].equals(""))
                    organized[day][0] = guards[random].getName() ;
                else
                    organized[day][0] +=  "," + guards[random].getName();
    		guards[random].setMorning(guards[random].getMorning() + 1);
                guards[random].addToMorning_min(dayToMin(day), 1);
    	}
    	else {
    		int min = minQuality(tempShifts);
                organized[day][0] = RemoveSpace(organized[day][0]);
    		if(organized[day][0].equals(""))
                    organized[day][0] = guards[min].getName() ;
                else
                    organized[day][0] +=  "," + guards[min].getName();
    		guards[min].setMorning(guards[min].getMorning() + 1);
                guards[min].addToMorning_min(dayToMin(day), 1);
    	}
    	}
    	else {
    		notes += "אין מספיק אנשים ביום " + numberToDay(day) + "   במשמרת בוקר" +"\n";
    	}
    	}
    	else {
    		if(isAuthority_array(available)) {
    			if(isMultipleAuthority_array(available)) {
    				int[] shifts = index_authorityMultiple_array(available);
    				if(array_equal(shifts)) {
    					random = r.nextInt(guards.length);
    					while(shifts[random] == -1) {
    		    			random = r.nextInt(guards.length);
    		    		}
                                organized[day][0] = RemoveSpace(organized[day][0]);
    				if(organized[day][0].equals(""))
                                    organized[day][0] = guards[random].getName() ;
                                else
                                    organized[day][0] +=  "," + guards[random].getName();
                		guards[random].setMorning(guards[random].getMorning() + 1);
                                guards[random].addToMorning_min(dayToMin(day), 1);
    				}
    				else {
                                int min = minQuality(shifts);
                                organized[day][0] = RemoveSpace(organized[day][0]);
        			if(organized[day][0].equals(""))
                                    organized[day][0] = guards[min].getName() ;
                                else
                                    organized[day][0] +=  "," + guards[min].getName();
                		guards[min].setMorning(guards[min].getMorning() + 1);
                                guards[min].addToMorning_min(dayToMin(day), 1);
    				}
    			}
    			else {
        		int num = index_authority_array(available);
                        organized[day][0] = RemoveSpace(organized[day][0]);
        		if(organized[day][0].equals(""))
                            organized[day][0] = guards[num].getName() ;
                        else
                            organized[day][0] +=  "," + guards[num].getName();
            		guards[num].setMorning(guards[num].getMorning() + 1);
                        guards[num].addToMorning_min(dayToMin(day), 1);
    			}
    		}
    		else {
    			if(is_in_array(available, officer)) {
    				int index = indexGuard(officer);
                                organized[day][0] = RemoveSpace(organized[day][0]);
    				if(organized[day][0].equals(""))
                                    organized[day][0] = guards[index].getName() ;
                                else
                                    organized[day][0] +=  "," + guards[index].getName();
    				guards[index].setMorning(guards[index].getMorning() + 1);
                                guards[index].addToMorning_min(dayToMin(day), 1);
    				notes += officer+ "  הוא האחמ\"ש ביום  " + numberToDay(day) +"\n";
    			}
    			else {
    			notes += "אין אחמש ביום " + numberToDay(day) + " במשמרת בוקר " +"\n";
    	    	if(!isEmpty(available)) {
    	    		if(equal_minus(tempShifts)) {
    	    			for(int i=0;i<tempShifts.length;i++) {
    	    				tempShifts[i] = guards[i].getMorning();
    	    			}
    	    		}
    	    		if(array_equal(tempShifts)) {
    	        		while(!is_in_array(available,guards[random].getName())) {
    	        			random = r.nextInt(guards.length);
    	        		}
                                organized[day][0] = RemoveSpace(organized[day][0]);
    	        		if(organized[day][0].equals(""))
                                    organized[day][0] = guards[random].getName() ;
                                else
                                    organized[day][0] +=  "," + guards[random].getName();
    	        		guards[random].setMorning(guards[random].getMorning() + 1);
                                guards[random].addToMorning_min(dayToMin(day), 1);
    	        	}
    	        	else {
    	        		int min = minQuality(tempShifts);
                                organized[day][0] = RemoveSpace(organized[day][0]);
    	        		if(organized[day][0].equals(""))
                                    organized[day][0] = guards[min].getName() ;
                                else
                                    organized[day][0] +=  "," + guards[min].getName();
    	        		guards[min].setMorning(guards[min].getMorning() + 1);
                                guards[min].addToMorning_min(dayToMin(day), 1);
    	        	}
    	        	}
                else{
                    notes += "אין מספיק אנשים ביום " + numberToDay(day) + "   במשמרת בוקר" +"\n";
                }
    			}
    		}
    	}
		return organized;
	}
    public static String[] morning_Available(String[][] days,int day,String[][] organized) {
		String[] available = new String[guards.length];
		if(day != 0) {
		for(int i=0;i<guards.length;i++) {
			if(isInDay(days[day][0],guards[i].getName()) && !isInOrganized(organized[day][1],guards[i].getName()) 
					&& !isInOrganized(organized[day-1][2],guards[i].getName()) && !isInOrganized(organized[day][0],guards[i].getName()) ){
                            if(guards[i].getNum_res_morning(dayToMin(day)) != -1)
				available[i] = guards[i].getName();
                            else
                                if(guards[i].getNum_res_morning(dayToMin(day)) != guards[i].getMorning())
                                    available[i] = guards[i].getName();
                                else
                                    available[i]= "";
                        }
			else
				available[i]= "";
		}
		}
		else
		{
			for(int i=0;i<guards.length;i++) {
				if(isInDay(days[day][0],guards[i].getName()) && !isInOrganized(organized[day][1],guards[i].getName()) 
						&& !isInDay(motsash,guards[i].getName()) && !isInOrganized(organized[day][0],guards[i].getName())){
				if(guards[i].getNum_res_morning(dayToMin(day)) != -1)
                                    available[i] = guards[i].getName();
                            else
                                if(guards[i].getNum_res_morning(dayToMin(day)) != guards[i].getMorning())
                                    available[i] = guards[i].getName();
                                else
                                    available[i]= "";
                        }
				else
					available[i]= "";
			}
		}
		return available;
	}
    public static String[][] Add_noon_shifts(int day,String[][] days,String[][] organized) {
	    String[] available ;
	    int[] tempShifts = new int[guards.length];
	    Random r = new Random();
    	int random = r.nextInt(guards.length);
	    available = noon_Available(days,organized,day);
	    if(!isEmpty(available)) {
	    for(int j=0;j<tempShifts.length;j++) {
	    	if(available[j] != "")
	    		tempShifts[j] = guards[j].getAfter_noon();
	    	else
	    		tempShifts[j] = -1;
	    }
		if(equal_minus(tempShifts)) {
			for(int i=0;i<tempShifts.length;i++) {
				tempShifts[i] = guards[i].getAfter_noon();
			}
		}
    	if(array_equal(tempShifts)) {
    		while(!is_in_array(available,guards[random].getName())) {
    			random = r.nextInt(guards.length);
    		}
                organized[day][1] = RemoveSpace(organized[day][1]);
                if(organized[day][1].equals(""))
                    organized[day][1] = guards[random].getName() ;
                else
                    organized[day][1] +=  "," + guards[random].getName();
    		guards[random].setAfter_noon(guards[random].getAfter_noon() + 1);
                guards[random].addToNoon_min(dayToMin(day), 1);
    	}
    	else {
    		int min = minQuality(tempShifts);
                organized[day][1] = RemoveSpace(organized[day][1]);
    		if(organized[day][1].equals(""))
                    organized[day][1] = guards[min].getName() ;
                else
                    organized[day][1] +=  "," + guards[min].getName();
    		guards[min].setAfter_noon(guards[min].getAfter_noon() + 1);
                guards[min].addToNoon_min(dayToMin(day), 1);
    	}
	    }
	    else {
	    	String[] available_morning ;
	    	available_morning = morning_Available(days, day, organized);
	    	if(!isEmpty(available_morning)) {
	    		String[] temp = toArray(organized[day][0]);
	    		for(int i =0 ; i<temp.length;i++) {
	    			if(!temp[i].equals("") && !temp[i].equals(",")) {
	    				if(isInDay(days[day][1],temp[i])) {
	    					random = r.nextInt(guards.length);
	    					while(!is_in_array(available_morning,guards[random].getName())) {
	    		    			random = r.nextInt(guards.length);
	    		    		}
	    					organized[day][0] = organized[day][0].replaceAll(temp[i], guards[random].getName());
                                                organized[day][1] = RemoveSpace(organized[day][1]);
	    					if(organized[day][1].equals(""))
                                                    organized[day][1] = temp[i];
                                                else
                                                organized[day][1] +=  "," + temp[i];
	    					guards[random].setMorning(guards[random].getMorning() + 1);
                                                guards[random].addToMorning_min(dayToMin(day), 1);
	    					int num = indexGuard(temp[i]);
	    					guards[num].setMorning(guards[num].getMorning() -1);
                                                guards[num].addToMorning_min(dayToMin(day), -1);
	    					guards[num].setAfter_noon(guards[num].getAfter_noon() + 1);
                                                guards[num].addToNoon_min(dayToMin(day), 1);
	    					break;
	    				}
	    			}
	    		}
	    	}
	    	else {
	    		notes += "יש פחות אנשים ביום " + numberToDay(day) +" במשמרת צהריים" +"\n";
	    	}
	    }
	    return organized;
	}
    public static String[] noon_Available(String[][] days,String[][] organized,int day) {
		String[] available = new String[guards.length];
		for(int i=0;i<guards.length;i++) {
			if(isInDay(days[day][1],guards[i].getName()) && !isInOrganized(organized[day][2],guards[i].getName()) && 
					!isInOrganized(organized[day][1],guards[i].getName()) && !isInOrganized(organized[day][0],guards[i].getName()) ){
                            if(guards[i].getNum_res_noon(dayToMin(day)) == -1)
				available[i] = guards[i].getName();
                            else
                                if(guards[i].getNum_res_noon(dayToMin(day)) < guards[i].getAfter_noon())
                                    available[i] = guards[i].getName();
                                else
                                    available[i]= "";
                                    
                        }
			else
				available[i] = "";
		}
		return available;
	}
    //Aiding Functions
    public void fixSpell(){
        for(int i=0;i<organized.length;i++){
            for(int j=0;j<organized[0].length;j++){
                organized[i][j] = RemoveSpace(organized[i][j]);
                organized[i][j] = organized[i][j].replaceAll(",,", ",");
                if(organized[i][j].length()>0){
                    if(organized[i][j].charAt(0) == ',')
                        organized[i][j] = organized[i][j].replaceFirst(",", "");
                }
            }
        }
    }
    public boolean is_equal(int[] array1,int[] array2){
        if(array1.length != array2.length)
            return false;
        for(int i=0;i<array1.length;i++){
            if(array1[i] != array2[i])
                return false;
        }
        return true;
    }
    public boolean is_in_array_int(int[] array,int num){
        for(int i=0;i<array.length;i++){
            if(array[i] == num)
                return true;
        }
        return false;
    }
    public int max2array_Weeknight(int[][] array){
        int max = -1;
        for(int i=0;i<array.length - 2;i++){
                if(i != 5 && i != 6){
                    if(max < array[i][2])
                        max = array[i][2];
                }
        }
        return max;
    }
    public static int nightShiftsSum(){
        int sum=0;
        for(int i=0;i<num_sec.length -2;i++){
            if(i != 5 && i != 4){
                sum += num_sec[i][2];
            }
        }
        return sum;
    }
    public static int numGuardsinNights(){
        int sum = nightShiftsSum();
        if(sum % guards.length == 0)
            return sum/guards.length;
        else
            return sum/guards.length +1;
    }
    public static int dayToMin(int day){
        if(day<5)
            return 0;
        else
            return 1;
    }
    public static boolean checkDate(LocalDate date){
        if(date.getDayOfMonth() == 1)
            return true;
        return false;
    }
    public static boolean isInOrganized(String day,String name){
            day = RemoveSpace(day);
            if(!day.equals("")){
            String[] split = day.split(",");
            name = RemoveSpace(name);
            for(int i=0;i<split.length;i++){
                split[i] =RemoveSpace(split[i]);
                if(split[i].equals(name))
                    return true;
            }
            }
            return false;
        }
    public static boolean isInDay(String day,String name){
             //String[] split = day.split(System.getProperty("line.separator"));
            String[] split = day.split("\n");
            name = RemoveSpace(name);
            for(int i=0;i<split.length;i++){
                split[i] =RemoveSpace(split[i]);
                if(split[i].equals(name))
                    return true;
            }
            return false;
        }
    public static int num_serve_day(String morning,String noon) {
		String[] morning_array = morning.split(System.getProperty("line.separator"));
		String[] noon_array = noon.split(System.getProperty("line.separator"));
		int num =morning_array.length;
		for(int i=0;i<noon_array.length;i++) {
			if(!is_in_array(morning_array, noon_array[i]))
				num++;
		}
		return num;
	}
    public static String numberToDay(int day) {
		String st = "";
		switch(day) {
		case 1:
			st = "שני שבוע ראשון";
			break;
		case 2:
			st = "שלישי שבוע ראשון";
			break;
		case 3:
			st = "רביעי שבוע ראשון";
			break;
		case 4:
			st = "חמישי שבוע ראשון";
			break;
		case 5:
			st = "שישי שבוע ראשון";
			break;
		case 6:
			st = "שבת שבוע ראשון";
			break;
		case 7:
			st = "ראשון שבוע שני";
			break;
		case 8:
			st = "שני שבוע שני";
			break;
		case 9:
			st = "שלישי שבוע שני";
			break;
		case 10:
			st = "רביעי שבוע שני";
			break;
		case 11:
			st = "חמישי שבוע שני";
			break;
		case 12:
			st = "שישי שבוע שני";
			break;
		case 13:
			st = "שבת שבוע שני";
			break;
		case 0:
			st = "ראשון שבוע ראשון";
			break;
		}
		return st;
	}
    public static boolean night_week_check(int day,String[][] organized,String name) {
		if(day < 5) {
			for(int i=0;i<5;i++) {
				if(isInOrganized(organized[i][2], name))
					return true;
			}
		}
		else {
			for(int i=7;i<11;i++) {
				if(isInOrganized(organized[i][2],name))
					return true;
			}
		}
		return false;
	}
    public static boolean isEmpty(String[] array) {
		for(int i=0;i<array.length;i++) {
			if(!array[i].equals(""))
				return false;
		}
		return true;
	}
    public static int[] index_authorityMultiple_array(String[] available) {
		int[] shifts = new int[available.length];
		for(int i=0;i<guards.length;i++) {
			if(guards[i].getName().equals(available[i]) && guards[i].isAuthority())
				shifts[i] = guards[i].getMorning();
			else
				shifts[i] = -1;
		}
		return shifts;
	}
    public static boolean isMultipleAuthority_array(String[] available) {
		boolean hit =false;
		for(int i=0;i<guards.length;i++) {
			if(guards[i].getName().equals(available[i]) && guards[i].isAuthority() && !hit)
				hit =true;
			if(guards[i].getName().equals(available[i]) && guards[i].isAuthority() && hit)
				return true;
		}
		return false;
	}
    public static boolean isAuthority_array(String[] available) {
		for(int i=0;i<guards.length;i++) {
			if(guards[i].getName().equals(available[i]) && guards[i].isAuthority())
				return true;
		}
		return false;
	}
    public static int index_authority_array(String[] available) {
		int num = -1;
		for(int i=0;i<guards.length;i++) {
			if(guards[i].getName().equals(available[i]) && guards[i].isAuthority())
				num = i;
		}
		return num;
	}
    public static int indexGuard(String st) {
		for(int i=0;i<guards.length;i++) {
			if(guards[i].getName().equals(st))
				return i;
		}
		return -1;
	}
    public static String[] toArray(String day) {
		String[] split = new String[guards.length]; 
		for(int i=0;i<split.length;i++)
			split[i] = "";
		int j=0;
		for(int i=0;i<day.length();i++) {
			char tav = day.charAt(i);
			if(tav != ',') 
				split[j] += tav; 
			else
				j++;
		}
		return split;
	}
    public static boolean equal_minus(int[] array) {
		for(int i=0;i<array.length;i++) {
			if(array[i] != -1)
				return false;
		}
		return true;
	}
    public static boolean is_in_array(String[] array,String name) {
            name = RemoveSpace(name);
		for(int i=0;i<array.length;i++) {
                    array[i] = RemoveSpace(array[i]);
			if(array[i].equals(name))
				return true;
		}
		return false;
	}
    public static boolean array_equal(int[] array) {
		int num= array[0];
		for(int i=1;i<array.length;i++) {
			if(array[i] != -1 && num != -1) {
				if(num != array[i])
					return false;
			}
			num = array[i];
		}
		return true;
	}
    public static int minQualityNight(int[] quality_num){
            int[] times = new int[quality_num.length];
            for(int i=0;i<quality_num.length;i++){
                if(quality_num[i]!=-1 )
                    times[i] = guards[i].getWeeknight();
                else
                    times[i] = -1;
            }
            int max = numGuardsinNights();
            int num=-1,temp=99999999;
		for(int i=0;i<quality_num.length;i++) {
			if(temp > quality_num[i] && quality_num[i]!=-1 && times[i] < max ) {
				temp=quality_num[i];
				num=i;
			}
		}
            if(num == -1){
                for(int i=0;i<quality_num.length;i++) {
			if(temp > quality_num[i] && quality_num[i]!=-1) {
				temp=quality_num[i];
				num=i;
			}
		}
            }
        return num;
        }
    public static int minQuality(int[] quality_num) {
		int num=0,temp=99999999;
		for(int i=0;i<quality_num.length;i++) {
			if(temp > quality_num[i] && quality_num[i]!=-1) {
				temp=quality_num[i];
				num=i;
			}
		}
		return num;
	}
    public static int maxArray(int[] array) {
		int temp=-1;
		for(int i=0;i<array.length;i++) {
			if(temp <array[i]) {
				temp=array[i];
			}
		}
		return temp;
	}
    public static String[][] inputDays_test(String[][] days){
		days[0][0]="עומר\nעמית\nניב";
		days[0][1]="עומר\nעמית\nניב\nדבאש\nגיל";
		days[0][2]="עומר\nעמית\nאופיר\nניב\nיאשה\nדבאש\nגיל";
		days[1][0]="עומר\nעמית\nליאור\nאופיר\nניב\nיאשה\nדבאש\nגיל";
		days[1][1]="עומר\nעמית\nליאור\nאופיר\nניב\nדבאש\nעדן\nגיל";
		days[1][2]="עומר\nעמית\nליאור\nאופיר\nדבאש\nעדן\nגיל";
		days[2][0]="עומר\nעמית\nליאור\nניב\nדבאש\nאורי\nעדן\nגיל";
		days[2][1]="עומר\nעמית\nליאור\nאופיר\nיאשה\nדבאש\nגיל";
		days[2][2]="עומר\nעמית\nאופיר\nדבאש\nעדן";
		days[3][0]="עומר\nעמית\nליאור\nאופיר\nיאשה\nדבאש\nגיל";
		days[3][1]="עומר\nעמית\nאופיר\nניב\nדבאש";
		days[3][2]="עומר\nעמית\nליאור\nאופיר\nדבאש\nאורי";
		days[4][0]="עומר\nעמית\nניב\nדבאש\nעדן\nשיפמן";
		days[4][1]="עומר\nניב\nדבאש\nאורי\nשיפמן\nגיל";
		days[4][2]="עומר\nדבאש\nעדן\nשיפמן";
		days[5][0]="עומר\nעמית\nרון\nליאור\nאופיר\nניב\nיאשה\nדבאש\nאורי\nעדן\nשיפמן\nגיל";
		days[5][1]="עומר\nעמית\nרון\nליאור\nאופיר\nניב\nיאשה\nדבאש\nאורי\nעדן\nשיפמן\nגיל";
		days[5][2]="עומר\nעמית\nליאור\nאופיר\nניב\nדבאש\nגיל";
		days[6][0]="עומר\nעמית\nאופיר\nניב\nדבאש\nשיפמן\nגיל";
		days[6][1]="עומר\nעמית\nרון\nליאור\nאופיר\nניב\nיאשה\nדבאש\nאורי\nעדן\nשיפמן\nגיל";
		days[6][2]="עומר\nעמית\nאופיר\nיאשה\nדבאש\nעדן";
		days[7][0]="עמית\nניב\nיאשה\nדבאש\nשיפמן";
		days[7][1]="עומר\nעמית\nניב\nיאשה\nדבאש\nשיפמן";
		days[7][2]="עומר\nעמית\nניב\nדבאש\nשיפמן";
		days[8][0]="עומר\nעמית\nליאור\nאופיר\nניב\nיאשה";
		days[8][1]="עומר\nעמית\nאופיר\nניב\nדבאש\nעדן\nשיפמן";
		days[8][2]="עומר\nעמית\nאופיר\nדבאש\nעדן";
		days[9][0]="עומר\nעמית\nאופיר\nניב\nדבאש\nעדן\nשיפמן\nגיל";
		days[9][1]="עומר\nעמית\nאופיר\nיאשה\nדבאש\nגיל";
		days[9][2]="עומר\nעמית\nאופיר\nדבאש\nעדן";
		days[10][0]="עומר\nעמית\nאופיר\nיאשה\nדבאש\nגיל";
		days[10][1]="עומר\nעמית\nאופיר\nניב\nדבאש\nגיל";
		days[10][2]="עומר\nעמית\nאופיר\nדבאש";
		days[11][0]="עומר\nעמית\nאופיר\nניב\nדבאש\nעדן\nגיל";
		days[11][1]="עומר\nעמית\nאופיר\nניב\nדבאש\nגיל";
		days[11][2]="עומר\nעמית\nאופיר\nדבאש\nעדן";
		days[12][0]="עומר\nעמית\nרון\nליאור\nאופיר\nניב\nיאשה\nדבאש\nאורי\nעדן\nשיפמן\nגיל";
		days[12][1]="עומר\nעמית\nרון\nליאור\nאופיר\nניב\nיאשה\nדבאש\nאורי\nעדן\nשיפמן\nגיל";
		days[12][2]="עומר\nעמית\nליאור\nאופיר\nדבאש\nגיל";
		days[13][0]="עומר\nעמית\nליאור\nאופיר\nניב\nדבאש\nגיל";
		days[13][1]="עומר\nעמית\nרון\nליאור\nאופיר\nניב\nיאשה\nדבאש\nאורי\nעדן\nשיפמן\nגיל";
		days[13][2]="עומר\nעמית\nאופיר\nדבאש\nאורי\nעדן\nיאשה";
                motsash = "יאשה\nאורי";
		return days;
	}
    public static String[][] ResetArray2(String[][] array) {
		for(int i=0;i<array.length;i++) {
			for(int j=0;j<array[0].length;j++) {
				array[i][j]="";
			}
		}
		return array;
	}
    public static int StringToInt(String s) {
		//Turn String to Int
		int num=0,k=1;
		if(s.length()>=0) {
		s= RemoveSpace(s);
		for(int i=s.length()-1;i>=0;i--) {
			num= num +Integer.parseInt(String.valueOf(s.charAt(i)))*k;
			k=k*10;
			}
		}
		return num;
	}
    public static String RemoveSpace(String s) {
		//Removes Space From String
		String temp="";
		for(int i=0;i<s.length();i++) {
			if(s.charAt(i)!=' ')
				temp= temp+s.charAt(i);
		}
		s =s.replaceAll(System.getProperty("line.separator"),"");
		return temp;
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JTextPane Morning1;
    public static javax.swing.JTextPane Morning10;
    public static javax.swing.JTextPane Morning14;
    public static javax.swing.JTextPane Morning2;
    public static javax.swing.JTextPane Morning3;
    public static javax.swing.JTextPane Morning4;
    public static javax.swing.JTextPane Morning5;
    public static javax.swing.JTextPane Morning7;
    public static javax.swing.JTextPane Morning8;
    public static javax.swing.JTextPane Morning9;
    private javax.swing.JScrollPane ResScroll;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnMaximize;
    private javax.swing.JButton btnMinimize;
    public static javax.swing.JButton btnNews;
    public static javax.swing.JButton btnRestriction;
    private javax.swing.JButton btnTimeline;
    private javax.swing.JPanel days1;
    private javax.swing.JPanel days2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane23;
    private javax.swing.JScrollPane jScrollPane24;
    private javax.swing.JScrollPane jScrollPane25;
    private javax.swing.JScrollPane jScrollPane26;
    private javax.swing.JScrollPane jScrollPane27;
    private javax.swing.JScrollPane jScrollPane28;
    private javax.swing.JScrollPane jScrollPane29;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane30;
    private javax.swing.JScrollPane jScrollPane31;
    private javax.swing.JScrollPane jScrollPane32;
    private javax.swing.JScrollPane jScrollPane33;
    private javax.swing.JScrollPane jScrollPane34;
    private javax.swing.JScrollPane jScrollPane35;
    private javax.swing.JScrollPane jScrollPane36;
    private javax.swing.JScrollPane jScrollPane37;
    private javax.swing.JScrollPane jScrollPane38;
    private javax.swing.JScrollPane jScrollPane39;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane40;
    private javax.swing.JScrollPane jScrollPane41;
    private javax.swing.JScrollPane jScrollPane42;
    private javax.swing.JScrollPane jScrollPane43;
    private javax.swing.JScrollPane jScrollPane44;
    private javax.swing.JScrollPane jScrollPane45;
    private javax.swing.JScrollPane jScrollPane46;
    private javax.swing.JScrollPane jScrollPane47;
    private javax.swing.JScrollPane jScrollPane48;
    private javax.swing.JScrollPane jScrollPane49;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane50;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JSpinner jSpinner3;
    private javax.swing.JSpinner jSpinner4;
    private javax.swing.JSpinner jSpinner5;
    private javax.swing.JScrollPane jspTimeline;
    private javax.swing.JLabel lblNews;
    private javax.swing.JLabel lblRestriction;
    private javax.swing.JLabel lblTimeline;
    public static javax.swing.JSpinner morning10S;
    public static javax.swing.JTextPane morning11;
    public static javax.swing.JSpinner morning11S;
    public static javax.swing.JTextPane morning12;
    public static javax.swing.JSpinner morning12S;
    public static javax.swing.JTextPane morning13;
    public static javax.swing.JSpinner morning13S;
    public static javax.swing.JSpinner morning14S;
    public static javax.swing.JSpinner morning1S;
    public static javax.swing.JSpinner morning2S;
    public static javax.swing.JSpinner morning3S;
    public static javax.swing.JSpinner morning4S;
    public static javax.swing.JSpinner morning5S;
    public static javax.swing.JTextPane morning6;
    public static javax.swing.JSpinner morning6S;
    public static javax.swing.JSpinner morning7S;
    public static javax.swing.JSpinner morning8S;
    public static javax.swing.JSpinner morning9S;
    private javax.swing.JPanel mornings1;
    private javax.swing.JPanel mornings2;
    public static javax.swing.JTextPane motsashText;
    public static javax.swing.JTextPane night1;
    public static javax.swing.JTextPane night10;
    public static javax.swing.JSpinner night10S;
    public static javax.swing.JTextPane night11;
    public static javax.swing.JSpinner night11S;
    public static javax.swing.JTextPane night12;
    public static javax.swing.JSpinner night12S;
    public static javax.swing.JTextPane night13;
    public static javax.swing.JSpinner night13S;
    public static javax.swing.JTextPane night14;
    public static javax.swing.JSpinner night14S;
    public static javax.swing.JSpinner night1S;
    public static javax.swing.JTextPane night2;
    public static javax.swing.JSpinner night2S;
    public static javax.swing.JTextPane night3;
    public static javax.swing.JSpinner night3S;
    public static javax.swing.JTextPane night4;
    public static javax.swing.JSpinner night4S;
    public static javax.swing.JTextPane night5;
    public static javax.swing.JSpinner night5S;
    public static javax.swing.JTextPane night6;
    public static javax.swing.JSpinner night6S;
    public static javax.swing.JTextPane night7;
    public static javax.swing.JSpinner night7S;
    public static javax.swing.JTextPane night8;
    public static javax.swing.JSpinner night8S;
    public static javax.swing.JTextPane night9;
    public static javax.swing.JSpinner night9S;
    private javax.swing.JPanel nights1;
    private javax.swing.JPanel nights2;
    public static javax.swing.JTextPane noon1;
    public static javax.swing.JTextPane noon10;
    public static javax.swing.JSpinner noon10S;
    public static javax.swing.JTextPane noon11;
    public static javax.swing.JSpinner noon11S;
    public static javax.swing.JTextPane noon12;
    public static javax.swing.JSpinner noon12S;
    public static javax.swing.JTextPane noon13;
    public static javax.swing.JSpinner noon13S;
    public static javax.swing.JTextPane noon14;
    public static javax.swing.JSpinner noon14S;
    public static javax.swing.JSpinner noon1S;
    public static javax.swing.JTextPane noon2;
    public static javax.swing.JSpinner noon2S;
    public static javax.swing.JTextPane noon3;
    public static javax.swing.JSpinner noon3S;
    public static javax.swing.JTextPane noon4;
    public static javax.swing.JSpinner noon4S;
    public static javax.swing.JTextPane noon5;
    public static javax.swing.JSpinner noon5S;
    public static javax.swing.JTextPane noon6;
    public static javax.swing.JSpinner noon6S;
    public static javax.swing.JTextPane noon7;
    public static javax.swing.JSpinner noon7S;
    public static javax.swing.JTextPane noon8;
    public static javax.swing.JSpinner noon8S;
    public static javax.swing.JTextPane noon9;
    public static javax.swing.JSpinner noon9S;
    private javax.swing.JPanel noons1;
    private javax.swing.JPanel noons2;
    public static javax.swing.JButton organize;
    private javax.swing.JPanel pnlBody;
    private javax.swing.JPanel pnlHeader;
    private javax.swing.JPanel pnlInsert;
    private javax.swing.JPanel pnlMenu;
    public static javax.swing.JTextPane quality;
    private javax.swing.JButton resetNoBtn;
    private javax.swing.JButton resetYesBtn;
    private javax.swing.JButton reset_button;
    private javax.swing.JLabel reset_label;
    private javax.swing.JPanel shifts1;
    private javax.swing.JPanel shifts2;
    private javax.swing.JPanel week1;
    private javax.swing.JPanel week2;
    // End of variables declaration//GEN-END:variables
}
